<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SCBLOG</title>
  <icon>https://www.gravatar.com/avatar/9f422c1be5ea2e238d8111cbc5a2a032</icon>
  
  <link href="https://dailynobug.github.io/atom.xml" rel="self"/>
  
  <link href="https://dailynobug.github.io/"/>
  <updated>2025-04-15T15:28:34.566Z</updated>
  <id>https://dailynobug.github.io/</id>
  
  <author>
    <name>black liu</name>
    <email>liusc0616@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mipi_csi_imx415</title>
    <link href="https://dailynobug.github.io/2025/04/15/mipi_csi_imx415/"/>
    <id>https://dailynobug.github.io/2025/04/15/mipi_csi_imx415/</id>
    <published>2025-04-15T15:28:34.566Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泰山派移植IMX415摄像头"><a href="#泰山派移植IMX415摄像头" class="headerlink" title="泰山派移植IMX415摄像头"></a>泰山派移植IMX415摄像头</h1><h2 id="CMOS摄像头整体的数据流向"><a href="#CMOS摄像头整体的数据流向" class="headerlink" title="CMOS摄像头整体的数据流向"></a>CMOS摄像头整体的数据流向</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250311140607067.png" alt="image-20250311140607067" title="">                </div>                <div class="image-caption">image-20250311140607067</div>            </figure><h2 id="IMX415驱动代码框架"><a href="#IMX415驱动代码框架" class="headerlink" title="IMX415驱动代码框架"></a>IMX415驱动代码框架</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泰山派移植IMX415摄像头&quot;&gt;&lt;a href=&quot;#泰山派移植IMX415摄像头&quot; class=&quot;headerlink&quot; title=&quot;泰山派移植IMX415摄像头&quot;&gt;&lt;/a&gt;泰山派移植IMX415摄像头&lt;/h1&gt;&lt;h2 id=&quot;CMOS摄像头整体的数据流向&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NxtPx4 Private firmware</title>
    <link href="https://dailynobug.github.io/2025/04/15/NxtPx4%20Private%20firmware/"/>
    <id>https://dailynobug.github.io/2025/04/15/NxtPx4%20Private%20firmware/</id>
    <published>2025-04-15T10:11:51.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NxtPx4-Private-firmware"><a href="#NxtPx4-Private-firmware" class="headerlink" title="NxtPx4 Private firmware"></a>NxtPx4 Private firmware</h1><h2 id="SPI-For-BMI088"><a href="#SPI-For-BMI088" class="headerlink" title="SPI For BMI088"></a>SPI For BMI088</h2><ol><li><strong>启动 CubeMX 并选择芯片:</strong> 打开 STM32CubeMX，创建一个新项目，选择你的目标芯片 <code>STM32H743VIHx</code>。</li><li><strong>配置 SPI 外设:</strong><ul><li>在左侧的 “Pinout &amp; Configuration” 标签页中，展开 “Connectivity” 类别。</li><li>选择一个 SPI 外设 (例如 <code>SPI1</code> 或 <code>SPI2</code>)。</li><li>设置 <strong>Mode</strong> 为 <code>Full-Duplex Master</code>。</li><li>在 <strong>Configuration</strong> -&gt; <strong>Parameter Settings</strong> 中：<ul><li><strong>Frame Format:</strong> Motorola</li><li><strong>Data Size:</strong> 8 Bits</li><li><strong>First Bit:</strong> MSB First</li><li><strong>Clock Polarity (CPOL):</strong> Low (根据 BMI088 数据手册，支持 Mode 0 和 Mode 3，我们选择常用的 Mode 0)</li><li><strong>Clock Phase (CPHA):</strong> 1 Edge (Mode 0)</li><li><strong>NSS Signal Type:</strong> <code>Disable</code> (我们将使用软件控制 GPIO 作为片选)。</li><li><strong>Baud Rate Prescaler:</strong> 选择一个预分频器，使得最终的 SPI 时钟速率低于或等于 BMI088 支持的最大速率 (10 MHz)。例如，如果 SPI 的时钟源是 100 MHz，选择预分频器 16 会得到 6.25 MHz，这是一个安全的选择。你需要根据你的 “Clock Configuration” 来计算。</li></ul></li></ul></li><li><strong>配置 GPIO 引脚:</strong><ul><li><strong>SPI 引脚:</strong> 在 Pinout 视图中，找到你选择的 SPI 外设对应的 SCK, MISO, MOSI 引脚，将它们的功能设置为对应的 <code>SPIx_SCK</code>, <code>SPIx_MISO</code>, <code>SPIx_MOSI</code> (它们会自动配置为 Alternate Function Push-pull)。</li><li><strong>片选 (CS&#x2F;NSS) 引脚:</strong><ul><li>选择<strong>两个</strong>空闲的 GPIO 引脚。一个用于加速度计片选 (例如 <code>PC4</code>，命名为 <code>ACC_CS</code>)，另一个用于陀螺仪片选 (例如 <code>PC5</code>，命名为 <code>GYR_CS</code>)。</li><li>将这两个引脚配置为 <code>GPIO_Output</code>。</li><li>在 <strong>Configuration</strong> -&gt; <strong>GPIO Settings</strong> 中：<ul><li>设置 <strong>GPIO Output level</strong> 为 <code>High</code> (SPI 片选通常是低电平有效，所以默认拉高)。</li><li>设置 <strong>GPIO mode</strong> 为 <code>Output Push Pull</code>。</li><li>设置 <strong>Maximum output speed</strong> 为 <code>High</code> 或 <code>Very High</code>。</li><li>可以设置 <strong>User Label</strong> 为 <code>ACC_CS</code> 和 <code>GYR_CS</code> 以方便识别。</li></ul></li></ul></li><li><strong>(可选) 中断引脚:</strong> BMI088 有中断输出引脚 (INT1_ACC, INT1_GYR)。如果需要使用中断来读取数据（推荐，避免轮询），选择一或两个 GPIO 引脚配置为 <code>GPIO_Input</code>，并启用对应的 <code>EXTI</code> 中断模式 (例如 <code>Rising Edge trigger detection</code>)。在 <strong>NVIC Settings</strong> 中启用对应的 EXTI 中断。</li></ul></li><li><strong>时钟配置 (Clock Configuration):</strong><ul><li>检查 “Clock Configuration” 标签页，确保你选择的 SPI 外设的时钟源 (例如 APB1&#x2F;APB2) 已启用，并且频率设置正确，以便计算波特率预分频器。H7 系列时钟配置较复杂，请仔细检查。</li></ul></li><li><strong>项目管理 (Project Manager):</strong><ul><li>设置项目名称和路径。</li><li>选择你的 Toolchain &#x2F; IDE (例如 MDK-ARM, STM32CubeIDE)。</li><li>在 <strong>Code Generator</strong> 标签页，勾选 “Generate peripheral initialization as a pair of ‘.c&#x2F;.h’ files per peripheral”。</li></ul></li><li><strong>生成代码:</strong> 点击 “Generate Code”。</li></ol><h2 id="USB虚拟串口部分"><a href="#USB虚拟串口部分" class="headerlink" title="USB虚拟串口部分"></a>USB虚拟串口部分</h2><h3 id="STM32CubeMX-配置步骤"><a href="#STM32CubeMX-配置步骤" class="headerlink" title="STM32CubeMX 配置步骤"></a>STM32CubeMX 配置步骤</h3><ol><li><strong>打开 CubeMX 工程:</strong> 打开你的 STM32H743VIHx 项目。</li><li><strong>启用 USB OTG FS:</strong><ul><li>在左侧 “Pinout &amp; Configuration” 标签页 -&gt; “Connectivity” 中，点击 <code>USB_OTG_FS</code>。</li><li>在 Mode 区域，勾选 <code>Device_Only</code>。</li><li><em>(可选但常见)</em> 激活 <code>Activate_VBUS</code>。这通常对应 <code>PA9</code> 引脚，用于检测 USB VBUS 电压，确保你的硬件设计支持 VBUS 检测。</li></ul></li><li><strong>启用 USB Device Middleware:</strong><ul><li>在左侧 “Pinout &amp; Configuration” 标签页 -&gt; “Middleware” 中，点击 <code>USB_DEVICE</code>。</li><li>勾选 <code>Enabled</code> 复选框。</li><li>在右侧出现的 “Class for FS IP” 下拉菜单中，选择 <code>Communication Device Class (Virtual Port Com)</code>。</li></ul></li><li><strong>检查 USB Device 参数 (可选):</strong><ul><li>在 “Middleware” -&gt; <code>USB_DEVICE</code> -&gt; “Configuration” -&gt; “Parameter Settings” 中，你可以查看或修改 VID, PID, 制造商&#x2F;产品字符串等。默认值通常可以直接使用。注意 <code>CDC_RX_DATA_SIZE</code> 和 <code>CDC_TX_DATA_SIZE</code> 定义了 VCP 的收发缓冲区大小。</li></ul></li><li><strong>配置 USB 时钟:</strong><ul><li><strong>非常重要:</strong> USB FS 需要一个精确的 48 MHz 时钟。转到 “Clock Configuration” 标签页。</li><li>你需要确保 USB 的时钟源 (通常来自 HSI48 或通过 PLL 配置外部晶振 HSE) 被正确设置为 48 MHz。如果使用 HSI48，直接选择它作为 USB 时钟源。如果使用 HSE+PLL，需要调整 PLL 设置（通常是 PLL1Q 或 PLL3Q）来产生 48 MHz。<strong>时钟配置不正确是 USB 无法工作的常见原因。</strong></li></ul></li><li><strong>检查 GPIO:</strong><ul><li>启用 <code>USB_OTG_FS</code> 后，对应的 <code>PA11 (DM)</code> 和 <code>PA12 (DP)</code> 引脚应该会自动配置为 USB 的 Alternate Function 模式。确认一下 Pinout 视图中的引脚状态。</li></ul></li><li><strong>生成代码:</strong><ul><li>点击 “Project Manager” 设置好项目选项。</li><li>点击 “Generate Code”。CubeMX 会生成初始化代码，并添加 USB Device 库文件到你的项目中 (包括 <code>Middlewares</code> 目录下的 <code>ST/STM32_USB_Device_Library</code> 和 <code>App</code> 目录下的 <code>usb_device.c/h</code>, <code>usbd_cdc_if.c/h</code> 等)。</li></ul></li></ol><h2 id="烧录上位机开发"><a href="#烧录上位机开发" class="headerlink" title="烧录上位机开发"></a>烧录上位机开发</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> serial.tools.list_ports</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,</span><br><span class="line">    QTabWidget, QGroupBox, QLabel, QLineEdit, QPushButton, QComboBox,</span><br><span class="line">    QTextEdit, QFileDialog, QMessageBox, QStatusBar, QCheckBox, QSizePolicy</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QThread, pyqtSignal, QObject, Qt, QTimer, QMetaObject, pyqtSlot</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QTextCursor <span class="comment"># 用于滚动文本框</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 常量 ---</span></span><br><span class="line">DFU_VID_PID = <span class="string">"0483:df11"</span> <span class="comment"># STM32 DFU VID/PID</span></span><br><span class="line">DEFAULT_ALT_SETTING = <span class="number">0</span>   <span class="comment"># 默认 Alt Setting</span></span><br><span class="line">DEFAULT_FLASH_ADDRESS = <span class="string">"0x08000000"</span> <span class="comment"># 默认烧录地址</span></span><br><span class="line">DFU_UTIL_COMMAND = <span class="string">"dfu-util"</span> <span class="comment"># dfu-util 命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_stamp</span><span class="params">()</span>:</span></span><br><span class="line">    ct = time.time()</span><br><span class="line">    local_time = time.localtime(ct)</span><br><span class="line">    data_head = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, local_time)</span><br><span class="line">    data_secs = (ct - int(ct)) * <span class="number">1000</span></span><br><span class="line">    time_stamp = <span class="string">"%s.%03d"</span> % (data_head, data_secs)</span><br><span class="line">    <span class="keyword">return</span> time_stamp</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 串口读取 Worker (运行在 QThread) ---</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialWorker</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="string">"""处理串口读写的 Worker 对象"""</span></span><br><span class="line">    data_received = pyqtSignal(bytes)    <span class="comment"># 信号：接收到数据</span></span><br><span class="line">    error_occurred = pyqtSignal(str)     <span class="comment"># 信号：发生错误</span></span><br><span class="line">    finished = pyqtSignal()              <span class="comment"># 信号：任务完成</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, serial_instance)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.ser = serial_instance</span><br><span class="line">        self._is_running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""开始循环读取串口数据"""</span></span><br><span class="line">        self._is_running = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> self._is_running:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> self.ser <span class="keyword">and</span> self.ser.is_open:</span><br><span class="line">                    <span class="comment"># 检查是否有数据等待读取</span></span><br><span class="line">                    <span class="keyword">if</span> self.ser.in_waiting &gt; <span class="number">0</span>:</span><br><span class="line">                        data = self.ser.read(self.ser.in_waiting)</span><br><span class="line">                        <span class="keyword">if</span> data:</span><br><span class="line">                            print(type(data))</span><br><span class="line">                            self.data_received.emit(data) <span class="comment"># 发送接收到的数据信号</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 短暂休眠，避免空转占用过多 CPU</span></span><br><span class="line">                        QThread.msleep(<span class="number">10</span>) <span class="comment"># 使用 QThread.msleep 避免阻塞事件循环</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果串口意外关闭，则停止</span></span><br><span class="line">                    <span class="keyword">if</span> self._is_running:</span><br><span class="line">                        <span class="comment"># Check again to prevent emitting error after explicit stop</span></span><br><span class="line">                        <span class="keyword">if</span> self._is_running:</span><br><span class="line">                            self.error_occurred.emit(<span class="string">"串口似乎已关闭"</span>)</span><br><span class="line">                    self._is_running = <span class="literal">False</span> <span class="comment"># 退出循环</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> serial.SerialException <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> self._is_running: <span class="comment"># 避免在手动停止后再次发送错误</span></span><br><span class="line">                    self.error_occurred.emit(<span class="string">f"串口读取错误: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">                self._is_running = <span class="literal">False</span> <span class="comment"># 退出循环</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> self._is_running:</span><br><span class="line">                    self.error_occurred.emit(<span class="string">f"读取线程未知错误: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">                self._is_running = <span class="literal">False</span> <span class="comment"># 退出循环</span></span><br><span class="line"></span><br><span class="line">        self.ser = <span class="literal">None</span> <span class="comment"># 清理引用</span></span><br><span class="line">        self.finished.emit() <span class="comment"># 发送完成信号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""请求停止读取循环"""</span></span><br><span class="line">        self._is_running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- DFU 烧录 Worker (运行在 QThread) ---</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DfuWorker</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="string">"""处理 DFU 烧录命令的 Worker 对象"""</span></span><br><span class="line">    progress_update = pyqtSignal(str) <span class="comment"># 信号：更新进度文本</span></span><br><span class="line">    finished = pyqtSignal(int, str)   <span class="comment"># 信号：任务完成 (返回码, 最终消息)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, command_list)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.command = command_list</span><br><span class="line">        self._is_running = <span class="literal">False</span></span><br><span class="line">        self.process = <span class="literal">None</span> <span class="comment"># 用于持有 subprocess 实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""执行 dfu-util 命令"""</span></span><br><span class="line">        self._is_running = <span class="literal">True</span></span><br><span class="line">        final_message = <span class="string">""</span></span><br><span class="line">        return_code = <span class="number">-1</span> <span class="comment"># 默认错误码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.progress_update.emit(<span class="string">f"执行命令: <span class="subst">&#123;<span class="string">' '</span>.join(self.command)&#125;</span>\n"</span>)</span><br><span class="line">            <span class="comment"># 使用 Popen 以便可以读取实时输出</span></span><br><span class="line">            self.process = subprocess.Popen(self.command,</span><br><span class="line">                                            stdout=subprocess.PIPE,</span><br><span class="line">                                            stderr=subprocess.STDOUT, <span class="comment"># 合并标准错误到标准输出</span></span><br><span class="line">                                            text=<span class="literal">True</span>,</span><br><span class="line">                                            encoding=<span class="string">'utf-8'</span>, <span class="comment"># 指定编码</span></span><br><span class="line">                                            errors=<span class="string">'ignore'</span>,  <span class="comment"># 忽略解码错误</span></span><br><span class="line">                                            bufsize=<span class="number">1</span>, <span class="comment"># 行缓冲</span></span><br><span class="line">                                            universal_newlines=<span class="literal">True</span>,</span><br><span class="line">                                            creationflags=subprocess.CREATE_NO_WINDOW <span class="keyword">if</span> sys.platform == <span class="string">'win32'</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 实时读取输出</span></span><br><span class="line">            <span class="keyword">if</span> self.process.stdout:</span><br><span class="line">                <span class="keyword">while</span> self._is_running:</span><br><span class="line">                    line = self.process.stdout.readline()</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> line: <span class="comment"># 进程结束</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># Check running flag again before emitting, in case stop() was called</span></span><br><span class="line">                    <span class="keyword">if</span> self._is_running:</span><br><span class="line">                        self.progress_update.emit(line)</span><br><span class="line">                <span class="comment"># Check running flag before closing stdout</span></span><br><span class="line">                <span class="keyword">if</span> self._is_running:</span><br><span class="line">                    self.process.stdout.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 等待进程结束并获取返回码 (如果仍在运行)</span></span><br><span class="line">            <span class="keyword">if</span> self._is_running <span class="keyword">and</span> self.process:</span><br><span class="line">                return_code = self.process.wait()</span><br><span class="line">                <span class="keyword">if</span> return_code == <span class="number">0</span>:</span><br><span class="line">                    final_message = <span class="string">"\n--- 烧录成功完成 ---\n"</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    final_message = <span class="string">f"\n--- 烧录失败 (返回码: <span class="subst">&#123;return_code&#125;</span>) ---\n"</span></span><br><span class="line">                self.progress_update.emit(final_message)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> self._is_running: <span class="comment"># 如果是手动停止的</span></span><br><span class="line">                final_message = <span class="string">"\n--- 烧录中止 ---\n"</span></span><br><span class="line">                return_code = <span class="number">-99</span> <span class="comment"># 自定义中止码</span></span><br><span class="line">                <span class="comment"># Check if process exists before emitting update</span></span><br><span class="line">                <span class="keyword">if</span> self.process:</span><br><span class="line">                    self.progress_update.emit(final_message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            final_message = <span class="string">f"错误: 未找到 '<span class="subst">&#123;DFU_UTIL_COMMAND&#125;</span>' 命令。\n请确保已安装并添加到 PATH。\n"</span></span><br><span class="line">            self.progress_update.emit(final_message)</span><br><span class="line">            return_code = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            final_message = <span class="string">f"\n--- 烧录过程中发生异常 ---\nError: <span class="subst">&#123;e&#125;</span>\n"</span></span><br><span class="line">            self.progress_update.emit(final_message)</span><br><span class="line">            return_code = <span class="number">-2</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self._is_running = <span class="literal">False</span></span><br><span class="line">            self.process = <span class="literal">None</span> <span class="comment"># 清理 process 引用</span></span><br><span class="line">            self.finished.emit(return_code, final_message) <span class="comment"># 发送完成信号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""请求停止 DFU 进程"""</span></span><br><span class="line">        self._is_running = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.process <span class="keyword">and</span> self.process.poll() <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 如果进程仍在运行</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.process.terminate() <span class="comment"># 尝试终止进程</span></span><br><span class="line">                <span class="comment"># Check if process exists before emitting update</span></span><br><span class="line">                <span class="keyword">if</span> self.process:</span><br><span class="line">                    self.progress_update.emit(<span class="string">"尝试中止 DFU 进程...\n"</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># Check if process exists before emitting update</span></span><br><span class="line">                <span class="keyword">if</span> self.process:</span><br><span class="line">                    self.progress_update.emit(<span class="string">f"中止进程时出错: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 主应用窗口 ---</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">STM32ToolAppPyQt</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"STM32 DFU烧录 &amp; 串口助手 (PyQt6)"</span>)</span><br><span class="line">        self.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">850</span>, <span class="number">650</span>) <span class="comment"># x, y, width, height</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 成员变量 ---</span></span><br><span class="line">        self.firmware_path = <span class="string">""</span>         <span class="comment"># DFU 固件路径</span></span><br><span class="line">        self.serial_instance = <span class="literal">None</span>     <span class="comment"># pyserial 实例</span></span><br><span class="line">        self.serial_thread = <span class="literal">None</span>       <span class="comment"># 串口读取线程 (QThread)</span></span><br><span class="line">        self.serial_worker = <span class="literal">None</span>       <span class="comment"># 串口 Worker (QObject)</span></span><br><span class="line">        self.dfu_thread = <span class="literal">None</span>          <span class="comment"># DFU 烧录线程 (QThread)</span></span><br><span class="line">        self.dfu_worker = <span class="literal">None</span>          <span class="comment"># DFU Worker (QObject)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 初始化 UI ---</span></span><br><span class="line">        self._init_ui()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 启动检查 ---</span></span><br><span class="line">        self.check_dfu_util_exists()</span><br><span class="line">        <span class="comment"># 使用 QTimer 延迟执行，确保主窗口已显示</span></span><br><span class="line">        QTimer.singleShot(<span class="number">100</span>, self.refresh_dfu_device)</span><br><span class="line">        QTimer.singleShot(<span class="number">100</span>, self.refresh_com_ports)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_ui</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化用户界面"""</span></span><br><span class="line">        <span class="comment"># --- 中心控件和主布局 ---</span></span><br><span class="line">        self.central_widget = QWidget()</span><br><span class="line">        self.setCentralWidget(self.central_widget)</span><br><span class="line">        self.main_layout = QVBoxLayout(self.central_widget)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 创建选项卡控件 ---</span></span><br><span class="line">        self.tab_widget = QTabWidget()</span><br><span class="line">        self.main_layout.addWidget(self.tab_widget)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 创建 DFU 和串口选项卡 ---</span></span><br><span class="line">        self.dfu_tab = QWidget()</span><br><span class="line">        self.serial_tab = QWidget()</span><br><span class="line">        self.tab_widget.addTab(self.dfu_tab, <span class="string">"DFU 烧录"</span>)</span><br><span class="line">        self.tab_widget.addTab(self.serial_tab, <span class="string">"串口助手"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 布局 DFU 选项卡 ---</span></span><br><span class="line">        self._setup_dfu_tab()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 布局串口选项卡 ---</span></span><br><span class="line">        self._setup_serial_tab()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 创建状态栏 ---</span></span><br><span class="line">        self.status_bar = QStatusBar()</span><br><span class="line">        self.setStatusBar(self.status_bar)</span><br><span class="line">        self.dfu_status_label = QLabel(<span class="string">"DFU: 空闲"</span>)</span><br><span class="line">        self.serial_status_label = QLabel(<span class="string">"串口: 已断开"</span>)</span><br><span class="line">        self.status_bar.addPermanentWidget(self.dfu_status_label, <span class="number">1</span>) <span class="comment"># 添加伸展因子</span></span><br><span class="line">        self.status_bar.addPermanentWidget(self.serial_status_label, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_setup_dfu_tab</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""设置 DFU 选项卡内的控件和布局"""</span></span><br><span class="line">        layout = QVBoxLayout(self.dfu_tab)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- DFU 控制组 ---</span></span><br><span class="line">        control_group = QGroupBox(<span class="string">"DFU 控制"</span>)</span><br><span class="line">        control_layout = QGridLayout(control_group)</span><br><span class="line">        layout.addWidget(control_group)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># DFU 设备检测</span></span><br><span class="line">        self.refresh_dfu_btn = QPushButton(<span class="string">"检测 DFU 设备"</span>)</span><br><span class="line">        self.refresh_dfu_btn.clicked.connect(self.refresh_dfu_device)</span><br><span class="line">        self.dfu_device_label = QLabel(<span class="string">"未检测到 DFU 设备"</span>)</span><br><span class="line">        self.dfu_device_label.setWordWrap(<span class="literal">True</span>)</span><br><span class="line">        control_layout.addWidget(self.refresh_dfu_btn, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        control_layout.addWidget(self.dfu_device_label, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 跨两列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 固件选择</span></span><br><span class="line">        control_layout.addWidget(QLabel(<span class="string">"固件文件 (.bin):"</span>), <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.firmware_path_edit = QLineEdit()</span><br><span class="line">        self.firmware_path_edit.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        self.browse_firmware_btn = QPushButton(<span class="string">"浏览..."</span>)</span><br><span class="line">        self.browse_firmware_btn.clicked.connect(self.browse_firmware)</span><br><span class="line">        control_layout.addWidget(self.firmware_path_edit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        control_layout.addWidget(self.browse_firmware_btn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># DFU 参数</span></span><br><span class="line">        param_layout = QHBoxLayout()</span><br><span class="line">        param_layout.addWidget(QLabel(<span class="string">"Alt Setting:"</span>))</span><br><span class="line">        self.alt_setting_edit = QLineEdit(str(DEFAULT_ALT_SETTING))</span><br><span class="line">        self.alt_setting_edit.setFixedWidth(<span class="number">50</span>)</span><br><span class="line">        param_layout.addWidget(self.alt_setting_edit)</span><br><span class="line">        param_layout.addWidget(QLabel(<span class="string">"烧录地址:"</span>))</span><br><span class="line">        self.flash_addr_edit = QLineEdit(DEFAULT_FLASH_ADDRESS)</span><br><span class="line">        self.flash_addr_edit.setFixedWidth(<span class="number">120</span>)</span><br><span class="line">        param_layout.addWidget(self.flash_addr_edit)</span><br><span class="line">        param_layout.addStretch() <span class="comment"># 添加伸展，使参数靠左</span></span><br><span class="line">        control_layout.addLayout(param_layout, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment"># 跨三列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 烧录按钮</span></span><br><span class="line">        self.flash_button = QPushButton(<span class="string">"开始烧录"</span>)</span><br><span class="line">        self.flash_button.clicked.connect(self.flash_firmware)</span><br><span class="line">        control_layout.addWidget(self.flash_button, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment"># 跨三列居中 (默认)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- DFU 输出组 ---</span></span><br><span class="line">        output_group = QGroupBox(<span class="string">"DFU 输出"</span>)</span><br><span class="line">        output_layout = QVBoxLayout(output_group)</span><br><span class="line">        layout.addWidget(output_group)</span><br><span class="line"></span><br><span class="line">        self.dfu_output_text = QTextEdit()</span><br><span class="line">        self.dfu_output_text.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        self.dfu_output_text.setFontFamily(<span class="string">"Courier New"</span>) <span class="comment"># 等宽字体</span></span><br><span class="line">        output_layout.addWidget(self.dfu_output_text)</span><br><span class="line"></span><br><span class="line">        layout.addStretch() <span class="comment"># 添加伸展，使控件在垂直方向上不扩散</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_setup_serial_tab</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""设置串口选项卡内的控件和布局"""</span></span><br><span class="line">        layout = QVBoxLayout(self.serial_tab)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 串口设置组 ---</span></span><br><span class="line">        settings_group = QGroupBox(<span class="string">"串口设置"</span>)</span><br><span class="line">        settings_layout = QGridLayout(settings_group)</span><br><span class="line">        layout.addWidget(settings_group)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># COM 口选择</span></span><br><span class="line">        settings_layout.addWidget(QLabel(<span class="string">"COM 端口:"</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.com_port_combo = QComboBox()</span><br><span class="line">        self.refresh_com_btn = QPushButton(<span class="string">"刷新"</span>)</span><br><span class="line">        self.refresh_com_btn.clicked.connect(self.refresh_com_ports)</span><br><span class="line">        settings_layout.addWidget(self.com_port_combo, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        settings_layout.addWidget(self.refresh_com_btn, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 波特率选择</span></span><br><span class="line">        settings_layout.addWidget(QLabel(<span class="string">"波特率:"</span>), <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.baud_rate_combo = QComboBox()</span><br><span class="line">        baud_rates = [<span class="string">"9600"</span>, <span class="string">"19200"</span>, <span class="string">"38400"</span>, <span class="string">"57600"</span>, <span class="string">"115200"</span>, <span class="string">"230400"</span>, <span class="string">"460800"</span>, <span class="string">"921600"</span>, <span class="string">"1500000"</span>]</span><br><span class="line">        self.baud_rate_combo.addItems(baud_rates)</span><br><span class="line">        self.baud_rate_combo.setCurrentText(<span class="string">"1500000"</span>) <span class="comment"># 设置默认值</span></span><br><span class="line">        settings_layout.addWidget(self.baud_rate_combo, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接/断开按钮</span></span><br><span class="line">        self.connect_button = QPushButton(<span class="string">"打开串口"</span>)</span><br><span class="line">        self.connect_button.setCheckable(<span class="literal">True</span>) <span class="comment"># 设置为可切换状态的按钮</span></span><br><span class="line">        self.connect_button.toggled.connect(self.toggle_serial_connection)</span><br><span class="line">        settings_layout.addWidget(self.connect_button, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># 跨两行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 接收区组 ---</span></span><br><span class="line">        receive_group = QGroupBox(<span class="string">"接收区"</span>)</span><br><span class="line">        receive_layout = QVBoxLayout(receive_group)</span><br><span class="line">        layout.addWidget(receive_group)</span><br><span class="line"></span><br><span class="line">        self.receive_text = QTextEdit()</span><br><span class="line">        self.receive_text.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        self.receive_text.setFontFamily(<span class="string">"Courier New"</span>)</span><br><span class="line">        receive_layout.addWidget(self.receive_text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收区底部按钮和选项</span></span><br><span class="line">        receive_bottom_layout = QHBoxLayout()</span><br><span class="line">        self.hex_display_check = QCheckBox(<span class="string">"Hex 显示"</span>)</span><br><span class="line">        self.clear_receive_btn = QPushButton(<span class="string">"清空接收"</span>)</span><br><span class="line">        self.clear_receive_btn.clicked.connect(self.clear_receive_text)</span><br><span class="line">        receive_bottom_layout.addWidget(self.hex_display_check)</span><br><span class="line">        receive_bottom_layout.addStretch()</span><br><span class="line">        receive_bottom_layout.addWidget(self.clear_receive_btn)</span><br><span class="line">        receive_layout.addLayout(receive_bottom_layout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 发送区组 ---</span></span><br><span class="line">        send_group = QGroupBox(<span class="string">"发送区"</span>)</span><br><span class="line">        send_layout = QHBoxLayout(send_group) <span class="comment"># 使用水平布局</span></span><br><span class="line">        layout.addWidget(send_group)</span><br><span class="line"></span><br><span class="line">        self.send_entry = QLineEdit()</span><br><span class="line">        self.send_entry.returnPressed.connect(self.send_serial_data) <span class="comment"># 按回车发送</span></span><br><span class="line">        self.send_button = QPushButton(<span class="string">"发送"</span>)</span><br><span class="line">        self.send_button.clicked.connect(self.send_serial_data)</span><br><span class="line">        self.send_button.setEnabled(<span class="literal">False</span>) <span class="comment"># 默认禁用</span></span><br><span class="line"></span><br><span class="line">        self.send_newline_check = QCheckBox(<span class="string">"发送新行 (\\r\\n)"</span>)</span><br><span class="line">        self.send_newline_check.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.hex_send_check = QCheckBox(<span class="string">"Hex 发送"</span>)</span><br><span class="line"></span><br><span class="line">        send_layout.addWidget(self.send_entry)</span><br><span class="line">        send_layout.addWidget(self.send_newline_check)</span><br><span class="line">        send_layout.addWidget(self.hex_send_check)</span><br><span class="line">        send_layout.addWidget(self.send_button)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置发送输入框自动扩展</span></span><br><span class="line">        self.send_entry.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)</span><br><span class="line"></span><br><span class="line">        layout.addStretch() <span class="comment"># 添加伸展</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- DFU 相关方法 ---</span></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh_dfu_device</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""检测 DFU 设备"""</span></span><br><span class="line">        self.dfu_status_label.setText(<span class="string">"DFU: 正在检测..."</span>)</span><br><span class="line">        self.dfu_device_label.setText(<span class="string">"正在检测..."</span>)</span><br><span class="line">        QApplication.processEvents() <span class="comment"># 处理事件，更新UI</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 运行 dfu-util -l 命令，捕获输出，指定编码</span></span><br><span class="line">            process = subprocess.run(</span><br><span class="line">                [DFU_UTIL_COMMAND, <span class="string">"-l"</span>],</span><br><span class="line">                capture_output=<span class="literal">True</span>,</span><br><span class="line">                text=<span class="literal">True</span>,          <span class="comment"># 输出为文本</span></span><br><span class="line">                check=<span class="literal">False</span>,        <span class="comment"># 不检查返回码，手动处理</span></span><br><span class="line">                encoding=<span class="string">'utf-8'</span>,   <span class="comment"># 指定编码</span></span><br><span class="line">                errors=<span class="string">'ignore'</span>,    <span class="comment"># 忽略解码错误</span></span><br><span class="line">                creationflags=subprocess.CREATE_NO_WINDOW <span class="keyword">if</span> sys.platform == <span class="string">'win32'</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            output = process.stdout + <span class="string">"\n"</span> + process.stderr <span class="comment"># 合并 stdout 和 stderr</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 初始状态</span></span><br><span class="line">            found_device = <span class="literal">False</span></span><br><span class="line">            found_device_str = <span class="string">"未检测到 STM32 DFU 设备"</span></span><br><span class="line">            dfu_status_str = <span class="string">"DFU: 未检测到设备"</span></span><br><span class="line"></span><br><span class="line">            lines = output.splitlines()</span><br><span class="line">            <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(lines):</span><br><span class="line">                <span class="comment"># 更精确地匹配 VID/PID</span></span><br><span class="line">                vid_str = <span class="string">f"<span class="subst">&#123;DFU_VID_PID.split(<span class="string">':'</span>)[<span class="number">0</span>]&#125;</span>"</span> <span class="comment"># e.g., "vid=0483"</span></span><br><span class="line">                pid_str = <span class="string">f"<span class="subst">&#123;DFU_VID_PID.split(<span class="string">':'</span>)[<span class="number">1</span>]&#125;</span>"</span> <span class="comment"># e.g., "pid=df11"</span></span><br><span class="line">                <span class="comment"># print(f"114515 &#123;vid_str&#125; &#123;pid_str&#125;")</span></span><br><span class="line">                print(<span class="string">f"114516 <span class="subst">&#123;vid_str&#125;</span> <span class="subst">&#123;line.lower()&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">if</span> vid_str <span class="keyword">in</span> line.lower() <span class="keyword">and</span> pid_str <span class="keyword">in</span> line.lower():</span><br><span class="line">                    found_device = <span class="literal">True</span></span><br><span class="line">                    device_name = <span class="string">"STM32 Bootloader"</span> <span class="comment"># Default name</span></span><br><span class="line">                    <span class="comment"># Try to parse device name if available</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">"name="</span> <span class="keyword">in</span> line:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            start = line.find(<span class="string">'name="'</span>) + len(<span class="string">'name="'</span>)</span><br><span class="line">                            end = line.find(<span class="string">'"'</span>, start)</span><br><span class="line">                            <span class="keyword">if</span> start &gt; <span class="number">-1</span> <span class="keyword">and</span> end &gt; <span class="number">-1</span>:</span><br><span class="line">                                device_name = line[start:end]</span><br><span class="line">                        <span class="keyword">except</span> Exception: <span class="keyword">pass</span> <span class="comment"># Ignore parsing errors</span></span><br><span class="line"></span><br><span class="line">                    found_device_str = <span class="string">f"找到设备: <span class="subst">&#123;device_name&#125;</span> (<span class="subst">&#123;DFU_VID_PID&#125;</span>)"</span></span><br><span class="line">                    dfu_status_str = <span class="string">"DFU: 检测到设备"</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Find alternate setting info</span></span><br><span class="line">                    alt_info = []</span><br><span class="line">                    j = i + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> j &lt; len(lines) <span class="keyword">and</span> lines[j].strip().startswith(<span class="string">"alt="</span>):</span><br><span class="line">                        alt_info.append(lines[j].strip())</span><br><span class="line">                        j += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> alt_info:</span><br><span class="line">                        found_device_str += <span class="string">f" | Alts: <span class="subst">&#123;<span class="string">', '</span>.join(alt_info)&#125;</span>"</span></span><br><span class="line">                    <span class="keyword">break</span> <span class="comment"># Found the first matching device, stop searching</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新 UI 和日志</span></span><br><span class="line">            self.dfu_device_label.setText(found_device_str)</span><br><span class="line">            self.dfu_status_label.setText(dfu_status_str)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录日志，包括完整输出</span></span><br><span class="line">            <span class="keyword">if</span> found_device:</span><br><span class="line">                log_output = <span class="string">f"检测到 DFU 设备:\n<span class="subst">&#123;output&#125;</span>\n"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log_output = <span class="string">f"未在 dfu-util 输出中找到 VID=<span class="subst">&#123;DFU_VID_PID.split(<span class="string">':'</span>)[<span class="number">0</span>]&#125;</span>, PID=<span class="subst">&#123;DFU_VID_PID.split(<span class="string">':'</span>)[<span class="number">1</span>]&#125;</span> 的设备。\n"</span></span><br><span class="line">                log_output += <span class="string">"请确认:\n"</span></span><br><span class="line">                log_output += <span class="string">"1. 设备已连接并处于 DFU 模式。\n"</span></span><br><span class="line">                log_output += <span class="string">"2. (Windows) 已使用 Zadig 等工具安装正确的 WinUSB 或 libusb 驱动。\n"</span></span><br><span class="line">                log_output += <span class="string">"3. (Linux) 具有访问 USB 设备的权限 (可能需要 udev 规则)。\n"</span></span><br><span class="line">                log_output += <span class="string">f"\n--- dfu-util -l 输出 ---\n<span class="subst">&#123;output&#125;</span>\n-------------------------\n"</span></span><br><span class="line"></span><br><span class="line">            self._append_dfu_text(log_output) <span class="comment"># Log the result and full output</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            self.dfu_device_label.setText(<span class="string">"错误: 未找到 dfu-util"</span>)</span><br><span class="line">            self.dfu_status_label.setText(<span class="string">"DFU: 错误"</span>)</span><br><span class="line">            self._append_dfu_text(<span class="string">f"错误: 未找到 '<span class="subst">&#123;DFU_UTIL_COMMAND&#125;</span>' 命令。\n"</span>)</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"未找到 '<span class="subst">&#123;DFU_UTIL_COMMAND&#125;</span>' 命令。\n请确保已安装 dfu-util 并将其添加到系统 PATH 环境变量中。"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.dfu_device_label.setText(<span class="string">f"检测出错: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">            self.dfu_status_label.setText(<span class="string">"DFU: 检测错误"</span>)</span><br><span class="line">            self._append_dfu_text(<span class="string">f"检测 DFU 设备时出错: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"检测 DFU 设备时出错: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">browse_firmware</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""浏览选择固件文件"""</span></span><br><span class="line">        initial_dir = os.path.expanduser(<span class="string">"~"</span>)</span><br><span class="line">        filepath, _ = QFileDialog.getOpenFileName(</span><br><span class="line">            self,</span><br><span class="line">            <span class="string">"选择固件文件"</span>,</span><br><span class="line">            initial_dir,</span><br><span class="line">            <span class="string">"Binary files (*.bin);;All files (*.*)"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> filepath:</span><br><span class="line">            self.firmware_path = filepath</span><br><span class="line">            self.firmware_path_edit.setText(filepath)</span><br><span class="line">            self._append_dfu_text(<span class="string">f"已选择固件: <span class="subst">&#123;filepath&#125;</span>\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flash_firmware</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""开始 DFU 烧录过程"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.firmware_path:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"请先选择固件文件！"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.firmware_path):</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"固件文件不存在: <span class="subst">&#123;self.firmware_path&#125;</span>"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"未检测到"</span> <span class="keyword">in</span> self.dfu_device_label.text() <span class="keyword">or</span> <span class="string">"错误"</span> <span class="keyword">in</span> self.dfu_device_label.text():</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"未检测到有效的 DFU 设备，请先检测设备。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否已在烧录中</span></span><br><span class="line">        <span class="keyword">if</span> self.dfu_thread <span class="keyword">and</span> self.dfu_thread.isRunning():</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"已有一个烧录任务正在进行中。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        alt_setting = self.alt_setting_edit.text()</span><br><span class="line">        flash_address = self.flash_addr_edit.text()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> alt_setting.isdigit():</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">"Alt Setting 必须是一个数字。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flash_address.startswith(<span class="string">"0x"</span>) <span class="keyword">or</span> <span class="keyword">not</span> all(c <span class="keyword">in</span> <span class="string">'0123456789abcdefABCDEF'</span> <span class="keyword">for</span> c <span class="keyword">in</span> flash_address[<span class="number">2</span>:]):</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">"烧录地址格式无效 (应为 0x 开头的十六进制数)。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 准备 DFU 命令</span></span><br><span class="line">        command = [</span><br><span class="line">            DFU_UTIL_COMMAND,</span><br><span class="line">            <span class="string">"-a"</span>, alt_setting,</span><br><span class="line">            <span class="string">"-s"</span>, <span class="string">f"<span class="subst">&#123;flash_address&#125;</span>:leave"</span>, <span class="comment"># 添加 :leave 使设备烧录后自动复位</span></span><br><span class="line">            <span class="string">"-D"</span>, self.firmware_path</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新 UI 状态</span></span><br><span class="line">        self.flash_button.setEnabled(<span class="literal">False</span>)</span><br><span class="line">        self.flash_button.setText(<span class="string">"正在烧录..."</span>)</span><br><span class="line">        self.dfu_status_label.setText(<span class="string">"DFU: 正在烧录..."</span>)</span><br><span class="line">        self._append_dfu_text(<span class="string">f"--- 开始烧录: <span class="subst">&#123;os.path.basename(self.firmware_path)&#125;</span> ---\n"</span>)</span><br><span class="line">        self._append_dfu_text(<span class="string">f"Alt Setting: <span class="subst">&#123;alt_setting&#125;</span>, Address: <span class="subst">&#123;flash_address&#125;</span>\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建 Worker 和 Thread</span></span><br><span class="line">        self.dfu_worker = DfuWorker(command)</span><br><span class="line">        self.dfu_thread = QThread()</span><br><span class="line">        self.dfu_worker.moveToThread(self.dfu_thread)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接信号和槽</span></span><br><span class="line">        self.dfu_worker.progress_update.connect(self._append_dfu_text)</span><br><span class="line">        self.dfu_worker.finished.connect(self.dfu_finished)</span><br><span class="line">        self.dfu_thread.started.connect(self.dfu_worker.run) <span class="comment"># 线程启动后执行 run</span></span><br><span class="line">        <span class="comment"># 清理工作：线程结束后删除 Worker 和 Thread 对象</span></span><br><span class="line">        self.dfu_worker.finished.connect(self.dfu_thread.quit)</span><br><span class="line">        self.dfu_worker.finished.connect(self.dfu_worker.deleteLater)</span><br><span class="line">        self.dfu_thread.finished.connect(self.dfu_thread.deleteLater)</span><br><span class="line">        self.dfu_thread.finished.connect(self._reset_dfu_state) <span class="comment"># 线程结束后重置状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        self.dfu_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot(int, str)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfu_finished</span><span class="params">(self, return_code, message)</span>:</span></span><br><span class="line">        <span class="string">"""DFU 烧录完成后的处理"""</span></span><br><span class="line">        <span class="comment"># Extract the last meaningful line for the status bar</span></span><br><span class="line">        last_line = message.strip().splitlines()[<span class="number">-1</span>] <span class="keyword">if</span> message.strip() <span class="keyword">else</span> <span class="string">"任务结束"</span></span><br><span class="line">        self.dfu_status_label.setText(<span class="string">f"DFU: <span class="subst">&#123;last_line&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> return_code == <span class="number">0</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">"成功"</span>, <span class="string">"固件烧录成功！设备将尝试复位。"</span>)</span><br><span class="line">        <span class="keyword">elif</span> return_code != <span class="number">-99</span>: <span class="comment"># -99 是用户中止，不弹窗</span></span><br><span class="line">            QMessageBox.critical(self, <span class="string">"失败"</span>, <span class="string">f"固件烧录失败！请检查 DFU 输出信息。\n返回码: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 尝试刷新 DFU 设备状态 (可能已退出 DFU 模式)</span></span><br><span class="line">        QTimer.singleShot(<span class="number">1000</span>, self.refresh_dfu_device) <span class="comment"># 延迟执行</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_reset_dfu_state</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""重置 DFU 相关控件状态"""</span></span><br><span class="line">        self.flash_button.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.flash_button.setText(<span class="string">"开始烧录"</span>)</span><br><span class="line">        self.dfu_thread = <span class="literal">None</span> <span class="comment"># 清理线程引用</span></span><br><span class="line">        self.dfu_worker = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_append_dfu_text</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="string">"""向 DFU 输出文本框追加文本"""</span></span><br><span class="line">        self.dfu_output_text.moveCursor(QTextCursor.MoveOperation.End)</span><br><span class="line">        self.dfu_output_text.insertPlainText(text)</span><br><span class="line">        self.dfu_output_text.moveCursor(QTextCursor.MoveOperation.End) <span class="comment"># 确保滚动到底部</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 串口相关方法 ---</span></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh_com_ports</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""刷新可用 COM 端口列表"""</span></span><br><span class="line">        current_port = self.com_port_combo.currentText() <span class="comment"># Save current selection</span></span><br><span class="line">        self.com_port_combo.clear() <span class="comment"># 清空列表</span></span><br><span class="line">        ports = serial.tools.list_ports.comports()</span><br><span class="line">        port_names = [port.device <span class="keyword">for</span> port <span class="keyword">in</span> ports]</span><br><span class="line">        self.com_port_combo.addItems(port_names)</span><br><span class="line">        <span class="comment"># Try to restore previous selection</span></span><br><span class="line">        <span class="keyword">if</span> current_port <span class="keyword">in</span> port_names:</span><br><span class="line">            self.com_port_combo.setCurrentText(current_port)</span><br><span class="line">        <span class="keyword">elif</span> port_names:</span><br><span class="line">            self.com_port_combo.setCurrentIndex(<span class="number">0</span>) <span class="comment"># 默认选中第一个</span></span><br><span class="line">        self._log_serial_info(<span class="string">"已刷新 COM 端口列表。\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot(bool)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toggle_serial_connection</span><span class="params">(self, checked)</span>:</span></span><br><span class="line">        <span class="string">"""根据按钮状态连接或断开串口"""</span></span><br><span class="line">        <span class="keyword">if</span> checked: <span class="comment"># 按钮被按下，表示要连接</span></span><br><span class="line">            self._connect_serial()</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 按钮弹起，表示要断开</span></span><br><span class="line">            self._disconnect_serial()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_connect_serial</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""连接到选定的串口"""</span></span><br><span class="line">        port = self.com_port_combo.currentText()</span><br><span class="line">        baud_str = self.baud_rate_combo.currentText()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> port:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"请选择一个 COM 端口！"</span>)</span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>) <span class="comment"># 恢复按钮状态</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> baud_str.isdigit():</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">"波特率必须是一个数字！"</span>)</span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        baud = int(baud_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Attempt to open serial port</span></span><br><span class="line">            self.serial_instance = serial.Serial()</span><br><span class="line">            self.serial_instance.port = port</span><br><span class="line">            self.serial_instance.baudrate = baud</span><br><span class="line">            self.serial_instance.timeout = <span class="number">0.1</span> <span class="comment"># Use a small timeout</span></span><br><span class="line">            self.serial_instance.open()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.serial_instance.is_open:</span><br><span class="line">                self.serial_status_label.setText(<span class="string">f"串口: 已连接 <span class="subst">&#123;port&#125;</span> @ <span class="subst">&#123;baud&#125;</span>bps"</span>)</span><br><span class="line">                self._log_serial_info(<span class="string">f"串口 <span class="subst">&#123;port&#125;</span> 已打开，波特率 <span class="subst">&#123;baud&#125;</span>。\n"</span>)</span><br><span class="line">                self.connect_button.setText(<span class="string">"关闭串口"</span>) <span class="comment"># 更新按钮文本</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 禁用设置控件</span></span><br><span class="line">                self.com_port_combo.setEnabled(<span class="literal">False</span>)</span><br><span class="line">                self.baud_rate_combo.setEnabled(<span class="literal">False</span>)</span><br><span class="line">                self.refresh_com_btn.setEnabled(<span class="literal">False</span>)</span><br><span class="line">                self.send_button.setEnabled(<span class="literal">True</span>) <span class="comment"># 启用发送按钮</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 创建并启动串口读取 Worker 和 Thread</span></span><br><span class="line">                self.serial_worker = SerialWorker(self.serial_instance)</span><br><span class="line">                self.serial_thread = QThread(self) <span class="comment"># Pass parent for potential better management</span></span><br><span class="line">                self.serial_worker.moveToThread(self.serial_thread)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 连接信号</span></span><br><span class="line">                self.serial_worker.data_received.connect(self.handle_serial_data)</span><br><span class="line">                self.serial_worker.error_occurred.connect(self.handle_serial_error)</span><br><span class="line">                self.serial_worker.finished.connect(self.serial_worker_finished) <span class="comment"># Worker 完成时</span></span><br><span class="line">                self.serial_thread.started.connect(self.serial_worker.run)</span><br><span class="line">                <span class="comment"># 线程结束后清理</span></span><br><span class="line">                self.serial_thread.finished.connect(self.serial_worker.deleteLater) <span class="comment"># Request deletion</span></span><br><span class="line">                self.serial_thread.finished.connect(self.serial_thread.deleteLater) <span class="comment"># Request deletion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                self.serial_thread.start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># This case should theoretically not be reached if open() fails</span></span><br><span class="line">                QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"无法打开串口 <span class="subst">&#123;port&#125;</span>！(is_open is False)"</span>)</span><br><span class="line">                self.connect_button.setChecked(<span class="literal">False</span>) <span class="comment"># 恢复按钮状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> serial.SerialException <span class="keyword">as</span> e:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"串口错误"</span>, <span class="string">f"无法打开串口 <span class="subst">&#123;port&#125;</span>:\n<span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">            self.serial_status_label.setText(<span class="string">f"串口: 打开失败"</span>)</span><br><span class="line">            self.serial_instance = <span class="literal">None</span></span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">"无效的波特率！"</span>)</span><br><span class="line">            self.serial_status_label.setText(<span class="string">"串口: 错误"</span>)</span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"未知错误"</span>, <span class="string">f"连接串口时发生未知错误:\n<span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">            self.serial_status_label.setText(<span class="string">"串口: 错误"</span>)</span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_disconnect_serial</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""断开当前串口连接"""</span></span><br><span class="line">        <span class="comment"># 1. Signal the worker to stop</span></span><br><span class="line">        <span class="keyword">if</span> self.serial_worker:</span><br><span class="line">            self.serial_worker.stop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. Request the thread to quit (it will finish when the worker loop ends)</span></span><br><span class="line">        <span class="keyword">if</span> self.serial_thread <span class="keyword">and</span> self.serial_thread.isRunning():</span><br><span class="line">            self.serial_thread.quit()</span><br><span class="line">            <span class="comment"># Optionally wait for thread to finish, but deleteLater should handle cleanup</span></span><br><span class="line">            <span class="comment"># self.serial_thread.wait(500)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. Close the serial port instance</span></span><br><span class="line">        port_name = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> self.serial_instance:</span><br><span class="line">            <span class="keyword">if</span> self.serial_instance.is_open:</span><br><span class="line">                port_name = self.serial_instance.port</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.serial_instance.close()</span><br><span class="line">                    <span class="keyword">if</span> port_name: <span class="comment"># Log only if port name was valid</span></span><br><span class="line">                        self._log_serial_info(<span class="string">f"串口 <span class="subst">&#123;port_name&#125;</span> 已关闭。\n"</span>)</span><br><span class="line">                <span class="keyword">except</span> serial.SerialException <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">if</span> port_name:</span><br><span class="line">                        self._log_serial_info(<span class="string">f"关闭串口 <span class="subst">&#123;port_name&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line">            self.serial_instance = <span class="literal">None</span> <span class="comment"># Clear the instance variable</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. Update UI</span></span><br><span class="line">        self.serial_status_label.setText(<span class="string">"串口: 已断开"</span>)</span><br><span class="line">        self.connect_button.setText(<span class="string">"打开串口"</span>)</span><br><span class="line">        <span class="comment"># Ensure button state is unchecked, even if disconnect was triggered programmatically</span></span><br><span class="line">        <span class="keyword">if</span> self.connect_button.isChecked():</span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Enable settings controls</span></span><br><span class="line">        self.com_port_combo.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.baud_rate_combo.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.refresh_com_btn.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.send_button.setEnabled(<span class="literal">False</span>) <span class="comment"># Disable send button</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. Clear thread/worker references (deleteLater handles actual deletion)</span></span><br><span class="line">        self.serial_thread = <span class="literal">None</span></span><br><span class="line">        self.serial_worker = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_serial_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""发送数据到串口"""</span></span><br><span class="line">        <span class="keyword">if</span> self.serial_instance <span class="keyword">and</span> self.serial_instance.is_open:</span><br><span class="line">            data_str = self.send_entry.text()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data_str:</span><br><span class="line">                <span class="keyword">return</span> <span class="comment"># 不发送空内容</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> self.hex_send_check.isChecked():</span><br><span class="line">                    <span class="comment"># 十六进制发送</span></span><br><span class="line">                    data_str = data_str.replace(<span class="string">" "</span>, <span class="string">""</span>) <span class="comment"># 移除空格</span></span><br><span class="line">                    <span class="keyword">if</span> len(data_str) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                        QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"十六进制字符串长度必须为偶数。"</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> all(c <span class="keyword">in</span> <span class="string">'0123456789abcdefABCDEF'</span> <span class="keyword">for</span> c <span class="keyword">in</span> data_str):</span><br><span class="line">                        QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"包含无效的十六进制字符。"</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        data_bytes = bytes.fromhex(data_str)</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">"无效的十六进制字符串。"</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 文本发送</span></span><br><span class="line">                    data_bytes = data_str.encode(<span class="string">'utf-8'</span>) <span class="comment"># 使用 UTF-8 编码</span></span><br><span class="line">                    <span class="keyword">if</span> self.send_newline_check.isChecked():</span><br><span class="line">                        data_bytes += <span class="string">b'\r\n'</span> <span class="comment"># 添加回车换行</span></span><br><span class="line"></span><br><span class="line">                self.serial_instance.write(data_bytes)</span><br><span class="line">                <span class="comment"># self._log_serial_info(f"Sent: &#123;data_bytes!r&#125;\n") # 可选：记录发送内容</span></span><br><span class="line">                <span class="comment"># self.send_entry.clear() # 可选：发送后清空输入框</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> serial.SerialTimeoutException:</span><br><span class="line">                QMessageBox.warning(self, <span class="string">"超时"</span>, <span class="string">"发送数据超时！"</span>)</span><br><span class="line">                self._log_serial_info(<span class="string">"发送超时。\n"</span>)</span><br><span class="line">            <span class="keyword">except</span> serial.SerialException <span class="keyword">as</span> e:</span><br><span class="line">                QMessageBox.critical(self, <span class="string">"串口错误"</span>, <span class="string">f"发送数据时出错:\n<span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">                self._log_serial_info(<span class="string">f"发送错误: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line">                <span class="comment"># 发送错误通常意味着连接有问题，尝试断开</span></span><br><span class="line">                <span class="keyword">if</span> self.connect_button.isChecked():</span><br><span class="line">                    self.connect_button.setChecked(<span class="literal">False</span>) <span class="comment"># 会触发 _disconnect_serial</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                QMessageBox.critical(self, <span class="string">"未知错误"</span>, <span class="string">f"发送数据时发生未知错误:\n<span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">                self._log_serial_info(<span class="string">f"发送错误: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"串口未连接！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot(bytes)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_serial_data</span><span class="params">(self, data_bytes)</span>:</span></span><br><span class="line">        <span class="string">"""处理从串口接收到的数据"""</span></span><br><span class="line">        cursor = self.receive_text.textCursor()</span><br><span class="line">        is_at_end = cursor.atEnd() <span class="comment"># Check if cursor is already at the end</span></span><br><span class="line"></span><br><span class="line">        cursor.movePosition(QTextCursor.MoveOperation.End) <span class="comment"># 移动到末尾</span></span><br><span class="line">        self.receive_text.setTextCursor(cursor)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.hex_display_check.isChecked():</span><br><span class="line">            <span class="comment"># 十六进制显示</span></span><br><span class="line">            hex_string = <span class="string">' '</span>.join(<span class="string">f'<span class="subst">&#123;b:<span class="number">02</span>X&#125;</span>'</span> <span class="keyword">for</span> b <span class="keyword">in</span> data_bytes)</span><br><span class="line">            self.receive_text.insertPlainText(hex_string + <span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 尝试用 UTF-8 解码显示文本，无法解码的字节用替换符显示</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试解码，替换无效字符</span></span><br><span class="line">                text = data_bytes.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'replace'</span>)</span><br><span class="line">                self.receive_text.insertPlainText(<span class="string">'['</span> + get_time_stamp() + <span class="string">'] '</span> + text)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 一般不会到这里，因为 errors='replace'</span></span><br><span class="line">                self.receive_text.insertPlainText(<span class="string">f"[解码错误: <span class="subst">&#123;e&#125;</span>]"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Auto-scroll only if the cursor was at the end before insertion</span></span><br><span class="line">        <span class="keyword">if</span> is_at_end:</span><br><span class="line">            self.receive_text.moveCursor(QTextCursor.MoveOperation.End)</span><br><span class="line">            <span class="comment"># Or using scrollbar:</span></span><br><span class="line">            <span class="comment"># scrollbar = self.receive_text.verticalScrollBar()</span></span><br><span class="line">            <span class="comment"># scrollbar.setValue(scrollbar.maximum())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot(str)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_serial_error</span><span class="params">(self, error_message)</span>:</span></span><br><span class="line">        <span class="string">"""处理串口 Worker 报告的错误"""</span></span><br><span class="line">        <span class="comment"># Avoid showing error if triggered by manual disconnect</span></span><br><span class="line">        <span class="keyword">if</span> self.connect_button.isChecked(): <span class="comment"># Check if we are supposed to be connected</span></span><br><span class="line">            QMessageBox.critical(self, <span class="string">"串口错误"</span>, error_message)</span><br><span class="line">            self._log_serial_info(<span class="string">f"[错误] <span class="subst">&#123;error_message&#125;</span>\n"</span>)</span><br><span class="line">            <span class="comment"># 发生错误时，强制断开连接</span></span><br><span class="line">            self.connect_button.setChecked(<span class="literal">False</span>) <span class="comment"># 会触发 _disconnect_serial</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serial_worker_finished</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""串口 Worker 完成时的槽函数 (用于调试或确认)"""</span></span><br><span class="line">        <span class="comment"># This slot is called when the worker's run() method finishes,</span></span><br><span class="line">        <span class="comment"># either normally (after stop() is called) or due to an error.</span></span><br><span class="line">        <span class="comment"># The disconnect logic should have already handled UI updates and port closing.</span></span><br><span class="line">        <span class="comment"># print("Serial worker finished signal received.")</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_receive_text</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""清空接收文本框"""</span></span><br><span class="line">        self.receive_text.clear()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_log_serial_info</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="string">"""将普通信息记录到串口接收框"""</span></span><br><span class="line">        cursor = self.receive_text.textCursor()</span><br><span class="line">        is_at_end = cursor.atEnd()</span><br><span class="line">        cursor.movePosition(QTextCursor.MoveOperation.End)</span><br><span class="line">        self.receive_text.setTextCursor(cursor)</span><br><span class="line">        self.receive_text.insertPlainText(<span class="string">f"[INFO] <span class="subst">&#123;message&#125;</span>"</span>)</span><br><span class="line">        <span class="comment"># Auto-scroll only if the cursor was at the end before insertion</span></span><br><span class="line">        <span class="keyword">if</span> is_at_end:</span><br><span class="line">            self.receive_text.moveCursor(QTextCursor.MoveOperation.End)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Utility Methods ---</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_dfu_util_exists</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""检查 dfu-util 是否可用"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            process = subprocess.run([DFU_UTIL_COMMAND, <span class="string">"-V"</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>, creationflags=subprocess.CREATE_NO_WINDOW <span class="keyword">if</span> sys.platform == <span class="string">'win32'</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> process.returncode != <span class="number">0</span> <span class="keyword">and</span> (<span class="string">"not found"</span> <span class="keyword">in</span> process.stderr.lower() <span class="keyword">or</span> <span class="string">"不是内部或外部命令"</span> <span class="keyword">in</span> process.stderr): <span class="comment"># 兼容 Windows 提示</span></span><br><span class="line">                <span class="keyword">raise</span> FileNotFoundError</span><br><span class="line">            <span class="comment"># Log the found version to console, not UI</span></span><br><span class="line">            <span class="keyword">if</span> process.stdout:</span><br><span class="line">                print(<span class="string">f"找到 dfu-util: <span class="subst">&#123;process.stdout.splitlines()[<span class="number">0</span>]&#125;</span>"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># Indicate success</span></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"未找到 '<span class="subst">&#123;DFU_UTIL_COMMAND&#125;</span>' 命令。\n请确保已安装 dfu-util 并将其添加到系统 PATH 环境变量中。"</span>)</span><br><span class="line">            self.dfu_status_label.setText(<span class="string">"DFU: 错误 (未找到 dfu-util)"</span>)</span><br><span class="line">            self._append_dfu_text(<span class="string">f"错误: 未找到 '<span class="subst">&#123;DFU_UTIL_COMMAND&#125;</span>'。\n"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># Indicate failure</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="string">f"检查 dfu-util 时出错: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">            self.dfu_status_label.setText(<span class="string">f"DFU: 错误 (<span class="subst">&#123;e&#125;</span>)"</span>)</span><br><span class="line">            self._append_dfu_text(<span class="string">f"检查 dfu-util 时出错: <span class="subst">&#123;e&#125;</span>\n"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># Indicate failure</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="string">"""处理窗口关闭事件"""</span></span><br><span class="line">        <span class="comment"># 停止 DFU 任务（如果正在进行）</span></span><br><span class="line">        <span class="keyword">if</span> self.dfu_worker:</span><br><span class="line">            self.dfu_worker.stop() <span class="comment"># Signal worker to stop</span></span><br><span class="line">        <span class="keyword">if</span> self.dfu_thread <span class="keyword">and</span> self.dfu_thread.isRunning():</span><br><span class="line">            self.dfu_thread.quit() <span class="comment"># Ask thread to quit</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dfu_thread.wait(<span class="number">500</span>): <span class="comment"># Wait max 500ms</span></span><br><span class="line">                print(<span class="string">"Warning: DFU thread did not finish gracefully."</span>)</span><br><span class="line">                <span class="comment"># Optionally terminate if needed, but can be risky</span></span><br><span class="line">                <span class="comment"># self.dfu_thread.terminate()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 停止串口任务并关闭串口 (use disconnect logic)</span></span><br><span class="line">        <span class="keyword">if</span> self.connect_button.isChecked():</span><br><span class="line">            self._disconnect_serial() <span class="comment"># Attempt graceful disconnect</span></span><br><span class="line">        <span class="comment"># Ensure thread is stopped even if disconnect failed or wasn't called</span></span><br><span class="line">        <span class="keyword">elif</span> self.serial_thread <span class="keyword">and</span> self.serial_thread.isRunning():</span><br><span class="line">            self.serial_thread.quit()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.serial_thread.wait(<span class="number">500</span>):</span><br><span class="line">                print(<span class="string">"Warning: Serial thread did not finish gracefully."</span>)</span><br><span class="line"></span><br><span class="line">        event.accept() <span class="comment"># 接受关闭事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 主程序入口 ---</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 确保在高 DPI 显示器上表现正常 (可选)</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(Qt.ApplicationAttribute, <span class="string">'AA_EnableHighDpiScaling'</span>):</span><br><span class="line">        QApplication.setAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> hasattr(Qt.ApplicationAttribute, <span class="string">'AA_UseHighDpiPixmaps'</span>):</span><br><span class="line">        QApplication.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main_window = STM32ToolAppPyQt()</span><br><span class="line">    main_window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NxtPx4-Private-firmware&quot;&gt;&lt;a href=&quot;#NxtPx4-Private-firmware&quot; class=&quot;headerlink&quot; title=&quot;NxtPx4 Private firmware&quot;&gt;&lt;/a&gt;NxtPx4 Private fi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>INAV_NxtPx4</title>
    <link href="https://dailynobug.github.io/2025/04/14/INAV_NxtPX4/"/>
    <id>https://dailynobug.github.io/2025/04/14/INAV_NxtPX4/</id>
    <published>2025-04-14T17:12:21.000Z</published>
    <updated>2025-04-15T15:28:34.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="INAV-NxtPx4"><a href="#INAV-NxtPx4" class="headerlink" title="INAV_NxtPx4"></a>INAV_NxtPx4</h1><p>为基于STM32H743VIH6主控的新飞控板适配INAV固件，需要结合硬件设计与INAV固件的开发框架进行定制化配置。以下是适配的核心步骤及注意事项：</p><hr><h3 id="一、开发环境搭建"><a href="#一、开发环境搭建" class="headerlink" title="一、开发环境搭建"></a><strong>一、开发环境搭建</strong></h3><ol><li><p><strong>获取INAV源码</strong><br>从GitHub克隆INAV仓库，切换到支持H7系列的最新分支（如INAV 8.0及以上版本）。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/INAVFlight/inav.git</span><br></pre></td></tr></table></figure></li><li><p><strong>配置工具链</strong><br>安装ARM GCC编译工具链（如<code>gcc-arm-none-eabi</code>），并确保CMake版本兼容。H743需支持STM32H7系列的编译配置。</p></li></ol><hr><h3 id="二、硬件描述文件配置"><a href="#二、硬件描述文件配置" class="headerlink" title="二、硬件描述文件配置"></a><strong>二、硬件描述文件配置</strong></h3><p>INAV通过<code>target</code>目录下的硬件描述文件定义飞控板的资源分配，需基于现有类似型号（如MATEKF405或官方支持的H743型号）进行修改：  </p><ol><li><p><strong>创建新目标目录</strong><br>在<code>src/main/target</code>下新建目录（如<code>CUSTOM_H743</code>），复制相近型号的配置文件（如<code>target.h</code>、<code>target.c</code>、<code>CMakeLists.txt</code>）。</p></li><li><p><strong>主控芯片定义</strong><br>在<code>CMakeLists.txt</code>中指定主控型号，例如：  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target_stm32h743xx(CUSTOM_H743)</span><br></pre></td></tr></table></figure></li><li><p><strong>引脚与外设映射</strong>  </p><ul><li><strong>LED与蜂鸣器</strong>：定义状态指示灯和蜂鸣器引脚。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED0 PC13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BEEPER PB8</span></span><br></pre></td></tr></table></figure></li><li><strong>SPI&#x2F;I2C总线</strong>：配置传感器接口。例如双IMU（如BMI270、ICM-42688）需指定SPI总线及片选引脚：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_SPI_DEVICE_1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI1_SCK_PIN PA5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMI270_CS_PIN PC2</span></span><br></pre></td></tr></table></figure></li><li><strong>UART接口</strong>：映射串口功能（GPS、接收机、图传等）。例如：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_UART3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UART3_RX_PIN PC11  <span class="comment">// GPS接口</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>传感器配置</strong>  </p><ul><li><strong>陀螺仪与加速度计</strong>：启用并指定型号及校准方向（如<code>IMU_BMI270_ALIGN CW0_DEG</code>）。  </li><li><strong>气压计与磁力计</strong>：若使用DPS310或IST8310，需启用对应驱动并指定I2C总线。  </li><li><strong>OSD与TF卡</strong>：配置AT7456E OSD芯片及SD卡接口（若支持）。</li></ul></li></ol><hr><h3 id="三、固件编译与烧录"><a href="#三、固件编译与烧录" class="headerlink" title="三、固件编译与烧录"></a><strong>三、固件编译与烧录</strong></h3><ol><li><p><strong>编译命令</strong><br>使用CMake生成编译配置，指定目标名称：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CUSTOM_H743</span><br></pre></td></tr></table></figure></li><li><p><strong>烧录固件</strong>  </p><ul><li><strong>DFU模式</strong>：按住BOOT按钮连接USB，使用地面站（如INAV Configurator）或<code>dfu-util</code>工具烧录。  </li><li><strong>SWD调试</strong>：通过ST-Link或J-Link直接烧录（需配置<code>USE_SWD</code>）。</li></ul></li></ol><hr><h3 id="四、地面站调试与验证"><a href="#四、地面站调试与验证" class="headerlink" title="四、地面站调试与验证"></a><strong>四、地面站调试与验证</strong></h3><ol><li><p><strong>连接与初始化</strong><br>使用INAV Configurator连接飞控，检查传感器数据（陀螺仪、加速度计、气压计）是否正常显示。</p></li><li><p><strong>功能配置</strong>  </p><ul><li><strong>接收机协议</strong>：在CLI中设置<code>serialrx_provider</code>（如SBUS、CRSF）。  </li><li><strong>电机输出</strong>：配置PWM&#x2F;DShot协议及电机映射顺序。  </li><li><strong>OSD叠加</strong>：启用并调整显示内容（如电压、飞行模式）。</li></ul></li><li><p><strong>校准与测试</strong>  </p><ul><li><strong>传感器校准</strong>：执行加速度计、陀螺仪、磁力计校准。  </li><li><strong>电机测试</strong>：通过地面站逐步测试各电机响应，确保无冲突。</li></ul></li></ol><hr><h3 id="五、常见问题与优化"><a href="#五、常见问题与优化" class="headerlink" title="五、常见问题与优化"></a><strong>五、常见问题与优化</strong></h3><ol><li><p><strong>驱动缺失</strong><br>若电脑无法识别飞控，需安装STM32 VCP驱动（如<code>stm32cubeprog</code>包含的驱动）。</p></li><li><p><strong>硬件冲突</strong>  </p><ul><li><strong>电源干扰</strong>：确保传感器（如IMU）独立供电以减少噪声。  </li><li><strong>引脚复用</strong>：避免UART与SPI&#x2F;I2C引脚冲突（参考芯片数据手册）。</li></ul></li><li><p><strong>性能优化</strong>  </p><ul><li><strong>DMA配置</strong>：为高频外设（如陀螺仪SPI）启用DMA以降低CPU负载。  </li><li><strong>时钟分配</strong>：优化STM32H7的时钟树，确保外设时钟与主频匹配。</li></ul></li></ol><hr><h3 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a><strong>参考案例</strong></h3><ul><li><strong>MicoAir743飞控</strong>：支持INAV 8.0+，其硬件描述文件可直接参考（如UART映射、传感器配置）。  </li><li><strong>星火计划H743飞控</strong>：采用双IMU设计，需在<code>target.h</code>中分别定义两个陀螺仪的SPI总线及校准参数。</li></ul><p>通过以上步骤，结合硬件特性调整配置文件，即可完成INAV对STM32H743VIH6飞控板的适配。开发过程中建议参考官方文档及社区案例以解决具体问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;INAV-NxtPx4&quot;&gt;&lt;a href=&quot;#INAV-NxtPx4&quot; class=&quot;headerlink&quot; title=&quot;INAV_NxtPx4&quot;&gt;&lt;/a&gt;INAV_NxtPx4&lt;/h1&gt;&lt;p&gt;为基于STM32H743VIH6主控的新飞控板适配INAV固件，需要</summary>
      
    
    
    
    
    <category term="硬件,四轴" scheme="https://dailynobug.github.io/tags/%E7%A1%AC%E4%BB%B6-%E5%9B%9B%E8%BD%B4/"/>
    
  </entry>
  
  <entry>
    <title>ELRS_RX&amp;TX</title>
    <link href="https://dailynobug.github.io/2025/04/13/ELRS_RX&amp;TX/"/>
    <id>https://dailynobug.github.io/2025/04/13/ELRS_RX&amp;TX/</id>
    <published>2025-04-13T09:17:51.000Z</published>
    <updated>2025-04-15T15:28:34.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELRS信号收发"><a href="#ELRS信号收发" class="headerlink" title="ELRS信号收发"></a>ELRS信号收发</h1><h2 id="ELRS介绍"><a href="#ELRS介绍" class="headerlink" title="ELRS介绍"></a>ELRS介绍</h2><p>ExpressLRS（简称 ELRS）是一个<strong>开源</strong>的、<strong>高性能</strong>的无线电控制（RC）链路系统。它主要用于遥控模型（如无人机、固定翼飞机、遥控车等），旨在提供<strong>长距离</strong>、<strong>低延迟</strong>、<strong>高刷新率</strong>和<strong>高抗干扰性</strong>的无线连接。</p><p><strong>核心特点：</strong></p><ol><li><strong>开源:</strong> 固件代码完全开放，由社区驱动开发和维护。</li><li><strong>高性能:</strong> 相较于许多传统 RC 协议，ELRS 提供更低的延迟（可达毫秒级）和更高的数据包刷新率（可达 1000Hz）。</li><li><strong>远距离:</strong> 基于 Semtech 的 LoRa（远距离）物理层调制技术（以及 2.4GHz 上的 FLRC），即使在较低功率下也能实现数公里甚至数十公里的控制距离。</li><li><strong>高抗干扰:</strong> 结合了 LoRa&#x2F;FLRC 调制和跳频技术（FHSS），在复杂的无线环境中具有更好的鲁棒性。</li><li><strong>成本效益:</strong> 通常基于 ESP32、ESP8285 或 STM32 等低成本微控制器和 Semtech SX127x (868&#x2F;915MHz) 或 SX128x (2.4GHz) 射频芯片构建。</li><li><strong>丰富功能:</strong> 支持完整的遥测回传、动态发射功率调整、无线固件更新等。</li></ol><h2 id="ELRS-实现原理"><a href="#ELRS-实现原理" class="headerlink" title="ELRS 实现原理"></a>ELRS 实现原理</h2><p>ELRS 的实现依赖于硬件（射频芯片+MCU）和软件（ELRS 固件）的结合。其核心原理可以概括为以下几点：</p><ol><li><strong>物理层调制 (PHY):</strong><ul><li>主要使用 <strong>LoRa</strong> 调制：这是一种扩频调制技术，通过牺牲一部分数据传输速率来换取极高的接收灵敏度（意味着可以接收到非常微弱的信号）和抗干扰能力，从而实现远距离通信。</li><li>在 2.4GHz 频段，ELRS 也支持 <strong>FLRC</strong> (Fast Long Range Communication) 调制，它能在保持较好距离和抗干扰性的同时，提供比 LoRa 更高的数据速率和更低的延迟。固件会根据配置（如数据包速率）智能选择使用 LoRa 还是 FLRC。</li></ul></li><li><strong>数据链路层:</strong><ul><li><strong>定制协议:</strong> ELRS 定义了自己的数据包结构，针对 RC 控制信号（通道数据）和遥测数据进行了优化，力求高效和低延迟。</li><li><strong>跳频扩频 (FHSS):</strong> 为了进一步抵抗干扰和提高链路的鲁棒性，ELRS 在多个预设的信道之间快速切换频率进行通信。发射机和接收机使用同步的跳频序列。</li><li><strong>绑定机制:</strong> 发射机（TX）和接收机（RX）通过一个用户设定的“绑定短语”（Binding Phrase）进行安全配对。只有拥有相同绑定短语的设备才能建立连接，防止被其他设备控制。</li><li><strong>同步:</strong> 发射机和接收机需要精确同步它们的时钟和跳频序列才能成功通信。</li></ul></li><li><strong>软件固件:</strong><ul><li>ELRS 固件运行在发射机和接收机模块的 MCU 上。</li><li><strong>发射端 (TX):</strong> 固件从遥控器（通过串行端口如 CRSF 协议）读取用户的控制输入，将其打包成 ELRS 格式，控制 SX12xx 芯片进行调制、跳频并发射。同时接收来自接收机的遥测数据并传回遥控器显示。</li><li><strong>接收端 (RX):</strong> 固件控制 SX12xx 芯片接收信号，进行解调和跳频同步。接收到有效数据包后，解包并将控制数据通过串行端口（通常是 CRSF 协议）发送给飞控或其他伺服设备。同时，它可以从飞控收集遥测数据，打包并发回给发射机。</li></ul></li></ol><h2 id="CRSF协议介绍"><a href="#CRSF协议介绍" class="headerlink" title="CRSF协议介绍"></a>CRSF协议介绍</h2><h3 id="什么是-CRSF-协议？"><a href="#什么是-CRSF-协议？" class="headerlink" title="什么是 CRSF 协议？"></a>什么是 CRSF 协议？</h3><p>CRSF (Crossfire Protocol) 是由 Team BlackSheep (TBS) 公司为其 Crossfire 远程无线电控制 (RC) 系统开发的一种<strong>双向串行通信协议</strong>。它主要用于在 RC 发射机（或其射频模块）与 RC 接收机（或飞行控制器）之间传输控制信号和遥测数据。</p><p>由于其高效、低延迟和强大的功能集，CRSF 已成为现代 RC 系统（包括 ExpressLRS、Tracer 等）和飞行控制器固件（如 Betaflight, INAV, ArduPilot）中广泛采用的事实标准。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li><strong>双向通信:</strong> 支持从发射机到接收机&#x2F;飞控的 RC 通道数据传输，以及从接收机&#x2F;飞控到发射机的遥测数据（如信号强度、电池电压、GPS 等）回传。</li><li><strong>串行传输:</strong> 通常通过 UART (通用异步收发传输器) 接口进行通信，物理连接简单。</li><li><strong>高效率:</strong> 采用紧凑的二进制数据帧格式，减少了传输开销。</li><li><strong>低延迟:</strong> 设计目标之一就是最小化控制链路的延迟。</li><li><strong>高数据包速率:</strong> 支持较高的更新频率，以匹配 ELRS 等高性能 RC 链路。</li><li><strong>可扩展性:</strong> 协议定义了多种帧类型，可以传输各种遥测信息，并支持设备发现、配置等高级功能。</li><li><strong>广泛支持:</strong> 被众多开源和商业 RC 产品及飞控固件支持。</li></ul><h3 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h3><p>CRSF 通信是主从式的，通常：</p><ol><li><strong>发射机&#x2F;TX 模块 -&gt; 接收机&#x2F;飞控:</strong><ul><li>发送 RC 通道数据（包含摇杆、开关等位置信息）。</li><li>发送设备查询 (Ping) 消息。</li><li>发送配置命令。</li></ul></li><li><strong>接收机&#x2F;飞控 -&gt; 发射机&#x2F;TX 模块:</strong><ul><li>响应设备查询，发送设备信息。</li><li>主动发送遥测数据帧，如：<ul><li>链路统计信息 (RSSI, LQ, SNR)</li><li>电池传感器信息 (电压, 电流, 容量)</li><li>GPS 位置信息</li><li>姿态信息</li><li>飞行模式</li><li>等等…</li></ul></li></ul></li></ol><h3 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h3><p>CRSF 使用二进制帧格式，其基本结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Device Address&gt; &lt;Frame Length&gt; &lt;Frame Type&gt; &lt;Payload&gt; &lt;CRC8&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>Device Address (1 byte):</strong> 帧的目标或来源设备地址（同步字节）。常见地址：<ul><li><code>0xC8</code>: 飞行控制器 (Flight Controller)</li><li><code>0xEA</code>: 无线电发射机 (Radio Transmitter)</li><li><code>0xEE</code>: 接收机 (Receiver)</li><li><code>0xEF</code>: TBS Core PNP Pro</li><li>… 其他地址用于不同设备</li></ul></li><li><strong>Frame Length (1 byte):</strong> <code>Frame Type</code> + <code>Payload</code> + <code>CRC8</code> 的总字节数。最大长度通常限制在 62 字节（总帧长 64 字节）。</li><li><strong>Frame Type (1 byte):</strong> 定义了 Payload 中包含的数据类型。</li><li><strong>Payload (Variable length):</strong> 实际的数据内容，其结构由 <code>Frame Type</code> 决定。</li><li><strong>CRC8 (1 byte):</strong> 循环冗余校验码，用于校验从 <code>Frame Type</code> 开始到 <code>Payload</code> 结束的数据完整性。通常使用 CRC-8-DVB-S2 多项式 (0xD5)。</li></ul><h3 id="常见帧类型示例"><a href="#常见帧类型示例" class="headerlink" title="常见帧类型示例"></a>常见帧类型示例</h3><ul><li><code>0x16</code>: <code>CRSF_FRAMETYPE_RC_CHANNELS_PACKED</code> - 包含压缩的 RC 通道数据（通常是 16 个通道，每个通道 11 位）。这是从发射机到接收机&#x2F;飞控最核心的数据帧。</li><li><code>0x14</code>: <code>CRSF_FRAMETYPE_LINK_STATISTICS</code> - 包含链路统计信息，如上行&#x2F;下行 RSSI、LQ (链路质量)、SNR (信噪比) 等。</li><li><code>0x08</code>: <code>CRSF_FRAMETYPE_BATTERY_SENSOR</code> - 包含电池信息，如电压 (mV)、电流 (cA)、已用容量 (mAh)。</li><li><code>0x02</code>: <code>CRSF_FRAMETYPE_GPS</code> - 包含 GPS 信息，如经度、纬度、地速、高度、卫星数等。</li><li><code>0x28</code>: <code>CRSF_FRAMETYPE_DEVICE_PING</code> - 设备查询帧。</li><li><code>0x29</code>: <code>CRSF_FRAMETYPE_DEVICE_INFO</code> - 设备信息响应帧，包含设备名称、硬件&#x2F;软件版本等。</li><li><code>0x07</code>: <code>CRSF_FRAMETYPE_ATTITUDE</code> - 包含姿态信息（俯仰、滚转、偏航角）。</li></ul><h3 id="物理层-UART"><a href="#物理层-UART" class="headerlink" title="物理层 (UART)"></a>物理层 (UART)</h3><ul><li><strong>接口:</strong> 标准 UART (TX, RX 引脚)。</li><li><strong>电平:</strong> 通常为 3.3V TTL 电平。</li><li><strong>参数:</strong> 8 数据位, 无校验位, 1 停止位 (8N1)。</li><li><strong>波特率:</strong> 常见的波特率包括 115200 bps, 400000 bps, 420000 bps 等。ELRS 通常使用较高的波特率（如 400k 或更高）以匹配其高数据包速率。发射机和接收机&#x2F;飞控必须配置为使用相同的波特率。</li></ul><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><p>发射端和接收端的硬件设计在核心连接上类似，主要区别在于与外部设备（遥控器或飞控）的接口。</p><h3 id="2-1-通用硬件要求-TX-和-RX"><a href="#2-1-通用硬件要求-TX-和-RX" class="headerlink" title="2.1. 通用硬件要求 (TX 和 RX)"></a>2.1. 通用硬件要求 (TX 和 RX)</h3><ol><li><strong>主控 MCU 选择:</strong><ul><li><strong>推荐:</strong> ESP32 系列 (因其性能、成本和 ELRS 社区广泛支持)。STM32 系列 (如 STM32F1, F4 等) 也是可选方案。</li><li><strong>要求:</strong><ul><li>高速 SPI 接口 (数据手册建议 &lt;&#x3D; 10MHz, CPOL&#x3D;0, CPHA&#x3D;0)。</li><li>足够的 GPIO 引脚用于连接模块的控制线 (NSS, RST, BUSY, DIO1, DIO2, DIO3, TXEN, RXEN)。</li><li>至少一个 UART 接口用于与遥控器&#x2F;飞控通信 (通常使用 CRSF 协议) 或用于调试&#x2F;烧录。</li><li>足够的 Flash 和 RAM 以运行 ELRS 固件。</li></ul></li></ul></li><li><strong>VG2392S240X0M2 模块与 MCU 连接:</strong><ul><li><strong>电源 (VCC, GND):</strong><ul><li>提供稳定的 3.1V 至 3.6V 电源，<strong>典型值为 3.3V</strong> (手册 Page 4)。</li><li>强烈建议使用低噪声 LDO 为模块供电 (手册 Page 8)。</li><li>在模块 VCC 引脚附近放置滤波电容，如 100nF 和 10uF (手册 Page 7 电路图示例)。</li><li>确保良好的接地，将模块的 GND 引脚 (Pin 2, 15) 连接到 MCU 的地。</li></ul></li><li><strong>SPI 接口:</strong><ul><li>MCU <code>MOSI</code> -&gt; 模块 <code>MOSI</code> (Pin 6)</li><li>MCU <code>MISO</code> &lt;- 模块 <code>MISO</code> (Pin 7)</li><li>MCU <code>SCK</code> -&gt; 模块 <code>SCK</code> (Pin 4)</li><li>MCU <code>NSS</code> -&gt; 模块 <code>NSS</code> (Pin 3)</li></ul></li><li><strong>控制引脚:</strong><ul><li>MCU <code>GPIO</code> -&gt; 模块 <code>RST</code> (Pin 8, 低电平有效复位)</li><li>MCU <code>GPIO</code> &lt;- 模块 <code>BUSY</code> (Pin 9, 高电平表示模块忙)</li><li>MCU <code>GPIO</code> (中断输入) &lt;- 模块 <code>DIO1</code> (Pin 10, 用于 TxDone, RxDone 等中断)</li><li>MCU <code>GPIO</code> &lt;-&gt; 模块 <code>DIO2</code> (Pin 11, 可配置功能，ELRS 可能用于天线切换或其他)</li><li>MCU <code>GPIO</code> &lt;-&gt; 模块 <code>DIO3</code> (Pin 12, 可配置功能)</li></ul></li><li><strong>PA&#x2F;LNA 控制 (关键):</strong><ul><li>MCU <code>GPIO</code> -&gt; 模块 <code>TXEN</code> (Pin 13, 发射使能，高电平有效)</li><li>MCU <code>GPIO</code> -&gt; 模块 <code>RXEN</code> (Pin 14, 接收使能，高电平有效)</li><li><strong>注意:</strong> ELRS 固件必须根据当前操作（发射、接收、空闲&#x2F;休眠）精确控制这两个引脚的电平 (逻辑见手册 Page 13)。</li></ul></li></ul></li><li><strong>天线:</strong><ul><li><strong>选择:</strong> 模块提供三种天线连接方式：板载 PCB 天线 (默认)、IPEX-1 座、邮票孔半孔 (手册 Page 5)。</li><li><strong>跳线电阻:</strong> 如果不使用默认的板载 PCB 天线，需要根据手册 Page 9 的图示修改模块内部的 0 欧姆跳线电阻，将信号路径切换到 IPEX 座或邮票孔 ANT 引脚 (Pin 1)。</li><li><strong>外部天线:</strong> 若使用外部天线 (通过 IPEX 或邮票孔)，需选择 2.4GHz 频段、50 欧姆阻抗的天线。</li><li><strong>RF 走线 (若使用邮票孔):</strong> 从模块 ANT 引脚 (Pin 1) 到天线连接器的 PCB 走线应尽可能短、直，保持 50 欧姆特性阻抗。遵循手册 Page 9-10 的 RF 走线和拐弯建议。避免直角拐弯，推荐圆弧或 45 度角。</li><li><strong>布局:</strong> 确保天线（尤其是板载 PCB 天线）远离金属外壳、电池、大型元器件和 PCB 接地铜皮覆盖区域，以保证辐射效率 (手册 Page 11)。</li></ul></li></ol><h3 id="2-2-发射端-TX-特定设计"><a href="#2-2-发射端-TX-特定设计" class="headerlink" title="2.2. 发射端 (TX) 特定设计"></a>2.2. 发射端 (TX) 特定设计</h3><ul><li><strong>与遥控器接口:</strong> 通常通过 UART 连接到遥控器主板，使用 CRSF 协议传输通道数据和接收遥测数据。</li><li><strong>用户接口 (可选):</strong> 可添加按钮用于绑定或功能切换，添加 LED 指示灯显示电源、连接状态、遥测状态等。</li></ul><h3 id="2-3-接收端-RX-特定设计"><a href="#2-3-接收端-RX-特定设计" class="headerlink" title="2.3. 接收端 (RX) 特定设计"></a>2.3. 接收端 (RX) 特定设计</h3><ul><li><strong>与飞控接口:</strong> 通常通过 UART 连接到飞控，使用 CRSF 协议发送控制指令和接收遥测数据请求。</li><li><strong>用户接口 (可选):</strong> 可添加 LED 指示灯显示电源、连接状态、绑定状态等。</li></ul><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2><p>软件设计的核心是配置和编译适用于该硬件组合的 ELRS 固件。</p><ol><li><strong>获取固件:</strong><ul><li>使用官方 <strong>ExpressLRS Configurator</strong> 工具，这是最简单的方式。</li><li>或者从 ExpressLRS GitHub 仓库 (<a href="https://github.com/ExpressLRS/ExpressLRS" target="_blank" rel="noopener">https://github.com/ExpressLRS/ExpressLRS</a>) 获取源码，使用 PlatformIO 进行编译。</li></ul></li><li><strong>硬件目标 (Target) 配置:</strong><ul><li><strong>关键步骤:</strong> 需要在 ELRS Configurator 或 PlatformIO 环境中选择或定义一个硬件目标，该目标必须与您使用的 MCU 以及 VG2392S240X0M2 模块的引脚连接相匹配。</li><li><strong>PA&#x2F;LNA 控制:</strong> 由于此模块带有外部 PA&#x2F;LNA，<strong>必须</strong>选择一个支持 <code>TXEN</code> 和 <code>RXEN</code> 引脚控制的 ELRS 硬件目标配置。如果官方没有完全匹配的预设目标，您可能需要：<ul><li>查找基于相同 MCU 且使用类似 PA&#x2F;LNA 控制方式 (如 RadioMaster Ranger Micro 2.4GHz 等) 的目标作为参考。</li><li>或者，在 PlatformIO 中创建自定义硬件布局 (Hardware Layout)，在对应的 <code>.ini</code> 文件或 <code>user_defines.txt</code> &#x2F; <code>hardware.h</code> 中正确定义 <code>RADIO_TXEN_PIN</code> 和 <code>RADIO_RXEN_PIN</code> 所连接的 MCU GPIO 引脚号。</li></ul></li><li><strong>引脚定义:</strong> 确保配置文件中定义的 SPI (MOSI, MISO, SCK, NSS)、RST、BUSY、DIO1 (IRQ) 引脚与硬件连接一致。DIO2&#x2F;DIO3 根据 ELRS 目标是否使用它们来决定是否需要定义。</li></ul></li><li><strong>关键固件配置参数:</strong><ul><li><strong>Regulatory Domain:</strong> 选择 <code>ISM_2400</code>。</li><li><strong>Binding Phrase:</strong> 为 TX 和 RX 设置相同的绑定短语。</li><li><strong>TX&#x2F;RX Role:</strong> 分别为发射端和接收端固件选择 <code>TX</code> 或 <code>RX</code>。</li><li><strong>Radio Output Power (重要!):</strong><ul><li>模块手册 (Page 4, 12) 指出，当 SX1281 内部输出设置为 0dBm 时，模块最终输出可达 27dBm。</li><li>因此，在 ELRS 固件配置中，<strong>不能</strong>直接设置目标输出功率为 27dBm。您需要配置 ELRS，使其驱动 SX1281 芯片输出较低的功率（例如 0dBm 或根据实际 PA 增益计算得出的值）。</li><li>具体的配置方式依赖于所选的 ELRS 硬件目标。通常在硬件配置文件 (<code>hardware.h</code> 或类似文件) 中会有功率相关的定义，需要确保这些定义与模块的 PA 增益相匹配，以避免损坏 PA 或输出功率超标。<strong>务必仔细查阅所选 ELRS 目标关于功率设置的说明，或在自定义目标时正确设置功率表。</strong> 手册建议 SX1281 输出不要超过 5dBm (Page 12)。</li></ul></li><li><strong>Packet Rate &#x2F; Telemetry Ratio:</strong> 根据需求选择合适的速率和遥测比率。</li></ul></li><li><strong>编译与烧录:</strong><ul><li>使用 ELRS Configurator 或 PlatformIO 编译固件。</li><li>通过 USB 转串口工具或其他烧录方式将编译好的固件分别烧录到 TX 和 RX 模块的 MCU 中。</li></ul></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.expresslrs.org/hardware/hardware-selection/" target="_blank" rel="noopener">ELRS官方网站</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ELRS信号收发&quot;&gt;&lt;a href=&quot;#ELRS信号收发&quot; class=&quot;headerlink&quot; title=&quot;ELRS信号收发&quot;&gt;&lt;/a&gt;ELRS信号收发&lt;/h1&gt;&lt;h2 id=&quot;ELRS介绍&quot;&gt;&lt;a href=&quot;#ELRS介绍&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pt-questions</title>
    <link href="https://dailynobug.github.io/2025/03/30/pt_questions/"/>
    <id>https://dailynobug.github.io/2025/03/30/pt_questions/</id>
    <published>2025-03-30T15:14:24.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PT问题解答-20250330"><a href="#PT问题解答-20250330" class="headerlink" title="PT问题解答-20250330"></a>PT问题解答-20250330</h1><h2 id="实训相关"><a href="#实训相关" class="headerlink" title="实训相关"></a>实训相关</h2><p>实训可以用竞赛顶替，任何竞赛都可以，只是分数高低的问题，如果不卷分数的话直接随便拿个奖顶掉就行，如果没奖甚至可以用银杏果或者大创项目抵掉</p><p>关于实训是否有价值，我个人认为学校合作的企业实训没有任何价值，有这时间不如自己搞点项目玩</p><p>应抵尽抵</p><h2 id="实习相关"><a href="#实习相关" class="headerlink" title="实习相关"></a>实习相关</h2><p>因为个人经历问题，这里描述的都是企业实习相关的内容</p><h3 id="方向方面"><a href="#方向方面" class="headerlink" title="方向方面"></a>方向方面</h3><p>当前就业方向很多，很宽泛，很难说谁适合什么方向，但是如果是本科生就业，<strong>技术岗位一般</strong>集中于下面几个方向：</p><ol><li>前端开发</li><li>后端开发</li><li>嵌入式开发</li><li>测试岗位</li><li>移动端开发（有时并入前后端开发）</li><li>系统架构方向</li><li>运维开发方向（可能有些岗位会涉及到AI infra）</li></ol><p>同时也有一些小众一些但是<strong>难度较高</strong>的技术岗位方向：</p><ol><li>网络安全方向（CTF大手子？）</li><li>量化金融方向（一般侧重于高性能计算）</li><li>AI方向（本科就业可能会比较难）</li><li>硬件电子方向（本科就业纯牛马，不推荐）</li></ol><p>除了技术之外还有一些非技术或者单纯和技术沾边的方向：</p><ol><li>产品经理（吃经验，想往这个方向走最好实习就冲）</li><li>部门HR？（这我还真没了解过）</li><li>FAE（Field Application Engineer 现场应用工程师），不好评，分企业，有的纯牛马</li><li>销售？</li><li>…….</li></ol><h3 id="能力方面"><a href="#能力方面" class="headerlink" title="能力方面"></a>能力方面</h3><p>不同方向的岗位需要不同的能力，具体的能力要求可以参考你感兴趣的岗位JD要求。可以去翻翻招聘软件或者你感兴趣的公司的官网，找到你感兴趣的岗位，看看有什么要求，一般JD要求的能力会比较杂，你精通其中的一两个其实就可以去投递，大胆开投，大不了被挂。</p><p>能力不求面面俱到，但求专精。</p><p>这里列举一些嵌入式软件开发能力（介绍的算是比较全面了，并不一定全部掌握，下面全是口胡）：</p><ol><li>熟练使用C&#x2F;C++，CMake ，Makefile，shell ， python等语言</li><li>熟练掌握STM32&#x2F;GD32&#x2F;各类MCU的外设驱动开发（SPI，IIC，UART，DMA，CAN，USB），熟悉传感器开发流程</li><li>熟悉RTOS移植和内核工作原理，熟练使用至少一种RTOS</li><li>能够看懂原理图，PCB图，会使用示波器，逻辑分析仪，频谱仪等测试设备</li><li>熟练掌握常用的嵌入式开发环境的搭建和使用，熟悉linux系统的使用（看起来很容易，但是确实是嵌入式开发当中很重要的能力）</li><li>linux kernel移植，功能裁切，linux驱动开发，uboot kernel rootfs及烧录，启动，调试。</li><li>还有很多，比如传感器方面的驱动开发，标定校准；系统调试调优，负载优化；摄像头，嵌入式音视频开发，Camera 3A算法开发，编解码开发。。。。</li></ol><h3 id="岗位方面"><a href="#岗位方面" class="headerlink" title="岗位方面"></a>岗位方面</h3><p>可以根据自己的兴趣进行选择，可以广撒网多捞鱼的去选择，不要在一棵树上吊死，不要局限于一个方向，也不一定全投开发</p><p>不同的岗位可以针对性的优化自己的简历，不要多个岗位使用同一份简历，简历上重点突出他们需要的能力，不要大杂烩（<del>我就很吃这方面亏</del>）</p><p>boss直聘，实习僧，公司官网。。。。都可以去投</p><h3 id="关于竞赛和成绩"><a href="#关于竞赛和成绩" class="headerlink" title="关于竞赛和成绩"></a>关于竞赛和成绩</h3><p>竞赛其实在面试中算是锦上添花，但是其实很多比赛面试官连听都没听过，他会让你去讲你们比赛都做了什么，如果你擅长讲故事的话，确实可以写上去加分。</p><p>当然一些硬核的比赛还是很加分的，比如什么ACM&#x2F;ICPC&#x2F;CTF&#x2F;超算大赛&#x2F;RM&#x2F;RC。。。。，但是这些一般也很难拿奖（）</p><p>至少我面试的很多公司对于比赛不是很重视（<del>可能都是牛马岗</del>）</p><p>关于成绩，只要不要太离谱，一般没事，GPA比较低的可以在简历上不写，GPA 3.5以上我认为都可以写上去，问题不大</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>人生是旷野，我在这里讲的都是我的眼光能看到的，但是我的眼光可能也是狭隘的，我上面的建议不一定适合所有人，每个人热爱的和适合的都不一样，还是希望大家能够根据自己的热爱去选择岗位，活出自己独一无二，多姿多彩的人生。</p><h2 id="Any-Question？"><a href="#Any-Question？" class="headerlink" title="Any Question？"></a>Any Question？</h2><p>QWQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PT问题解答-20250330&quot;&gt;&lt;a href=&quot;#PT问题解答-20250330&quot; class=&quot;headerlink&quot; title=&quot;PT问题解答-20250330&quot;&gt;&lt;/a&gt;PT问题解答-20250330&lt;/h1&gt;&lt;h2 id=&quot;实训相关&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MFly-Hardware</title>
    <link href="https://dailynobug.github.io/2025/02/19/MFly-Hardware/"/>
    <id>https://dailynobug.github.io/2025/02/19/MFly-Hardware/</id>
    <published>2025-02-19T10:12:21.000Z</published>
    <updated>2025-04-15T15:28:34.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="飞行器硬件设计"><a href="#飞行器硬件设计" class="headerlink" title="飞行器硬件设计"></a>飞行器硬件设计</h1><p>本文主要记录飞行器硬件设计的过程,以及一些问题记录.</p><p>本飞行器旨在作为一个低成本的实验平台完成相关算法和工程落地实践</p><h2 id="飞行器硬件拓扑"><a href="#飞行器硬件拓扑" class="headerlink" title="飞行器硬件拓扑"></a>飞行器硬件拓扑</h2><h3 id="飞机整体硬件拓扑"><a href="#飞机整体硬件拓扑" class="headerlink" title="飞机整体硬件拓扑"></a>飞机整体硬件拓扑</h3><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/%E9%A3%9E%E8%A1%8C%E5%99%A8%E7%BB%93%E6%9E%84%E5%9B%BE.drawio.png" alt="img" style="zoom: 80%;" /><h3 id="飞控硬件拓扑"><a href="#飞控硬件拓扑" class="headerlink" title="飞控硬件拓扑"></a>飞控硬件拓扑</h3><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/4-1%E9%A3%9E%E6%8E%A7%E7%BB%93%E6%9E%84%E5%9B%BE.drawio.png" alt="img" style="zoom:80%;" /><h3 id="遥控器硬件拓扑"><a href="#遥控器硬件拓扑" class="headerlink" title="遥控器硬件拓扑"></a>遥控器硬件拓扑</h3><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/%E9%81%A5%E6%8E%A7%E5%99%A8%E7%BB%93%E6%9E%84.drawio.png" alt="img" style="zoom:80%;" /><h2 id="飞控SOC域硬件设计"><a href="#飞控SOC域硬件设计" class="headerlink" title="飞控SOC域硬件设计"></a>飞控SOC域硬件设计</h2><h3 id="核心板部分"><a href="#核心板部分" class="headerlink" title="核心板部分"></a>核心板部分</h3><p>核心板部分是使用som-rk3399核心板,如图所示:</p><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219155216587.png" alt="image-20250219155216587" style="zoom: 50%;" /><center><p>SOM-RK3399核心板俯视图<p/><center/><ul><li><p>SOM-RK3399是友善电子团队设计的一款266-pin金手指形式高性能ARM计算机模块，它采用了瑞芯微64位六核SoC RK3399作为主处理器，标配2GB DDR3内存和16GB闪存，板载2x2 MIMO双天线WiFi模组，尺寸只有69.6x50mm，模块上带有独立的TypeC供电接口，以及USB-C显示接口，无需底板也可以单独使用。</p></li><li><p>SOM-RK3399计算模块具有丰富的外设和扩展接口，通过底板可连接使用4通道NVMe高速固态硬盘，读写速度高达1GB&#x2F;s; 它还可以扩展使用双MIPI宽动态摄像头，另外它还带有eDP显示接口，MIPI显示接口, 1路USB3.0, 2路USB2.0, 以及I2C, I2S, SPI, PWM, GPIO和串口等各种资源。</p></li></ul><p>相关核心板硬件部分可以参考链接:<a href="https://wiki.friendlyelec.com/wiki/index.php/SOM-RK3399/zh" target="_blank" rel="noopener">https://wiki.friendlyelec.com/wiki/index.php/SOM-RK3399/zh</a></p><p>该核心板使用0.5mm Pitch 260-Pin <strong>Standard Type</strong> DDR4 SODIMM Socket卡槽,</p><p>参考型号为:<a href="https://www.te.com/usa-en/product-2309409-5.html" target="_blank" rel="noopener">https://www.te.com/usa-en/product-2309409-5.html</a></p><p>根据卡槽引脚定义可以绘制相关原理图:</p><center class="half">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219155533770.png" width="300"/>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219155554870.png" width="300"/></center><center><p>SOM-RK3399硬件引脚图<p/><center/><h3 id="HDMI电路部分"><a href="#HDMI电路部分" class="headerlink" title="HDMI电路部分"></a>HDMI电路部分</h3><p>核心板中引出了HDMI接口的引脚,我们需要在底板上进行实现,其中HDMI引脚电路如图所示:</p><center class="half">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219162624.png" width="300"/>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219162719.png" width="300"/>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219162747.png" width="300"/></center><center>    <p>        底板HDMI原理图    </p></center><h3 id="SD卡电路部分"><a href="#SD卡电路部分" class="headerlink" title="SD卡电路部分"></a>SD卡电路部分</h3><p>核心板引出了<code>SDMMC0</code>相关引脚,这部分引脚可以画SD卡模块的电路,下面是这部分的原理图:</p><center class="half">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219163109553.png" alt="image-20250219163109553" width="300"/>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219163351.png" width="300"/></center><center>    <p>        底板SD卡模块原理图    </p></center><h3 id="RJ45网口模块"><a href="#RJ45网口模块" class="headerlink" title="RJ45网口模块"></a>RJ45网口模块</h3><p>核心板上有一个PHY芯片,引出以太网引脚,下方为RJ45模块原理图:</p><center>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219164043.png" width="300">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219164124.png" width="300"></center><center>    <p>        RJ45模块原理图    </p></center><h3 id="USB网卡电路"><a href="#USB网卡电路" class="headerlink" title="USB网卡电路"></a>USB网卡电路</h3><p>USB网卡使用的是<code>BL-M8812EU2</code>,打算使用这个芯片作为图传芯片使用,原理图如下,封装使用的是自己画的封装,存在部分小瑕疵,但是并不影响使用:</p><center>    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219164653.png" width="300">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219164755.png" width="300">    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/20250219164854.png" width="300"></center><center>    <p>USB网卡模块原理图</p></center><h2 id="电源方案汇总"><a href="#电源方案汇总" class="headerlink" title="电源方案汇总"></a>电源方案汇总</h2><p><strong>注意电阻选择上，有些数值在绘制的时候需要使用叠加来凑数</strong></p><h3 id="12V-5V方案"><a href="#12V-5V方案" class="headerlink" title="12V -&gt; 5V方案"></a>12V -&gt; 5V方案</h3><p>使用<strong>MP2236GJ-Z</strong>芯片 <a href="https://www.monolithicpower.com/en/documentview/productdocument/index/version/2/document_type/Datasheet/lang/en/sku/MP2236" target="_blank" rel="noopener">datasheet</a></p><p>主要特点和典型电路如下:</p><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219162207918.png" alt="image-20250219162207918" style="zoom: 67%;" /><p>支持3V-18V输入,6A输出,对于此方案下,12V输入,5V输出的要求,绘制原理图如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250219162328789.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="12V-3-3V方案"><a href="#12V-3-3V方案" class="headerlink" title="12V -&gt; 3.3V方案"></a>12V -&gt; 3.3V方案</h3><p>依旧使用<strong>MP2236GJ-Z</strong>芯片 <a href="https://www.monolithicpower.com/en/documentview/productdocument/index/version/2/document_type/Datasheet/lang/en/sku/MP2236" target="_blank" rel="noopener">datasheet</a>设计方案同上，但是在buck电阻上存在数据差别</p><h2 id="飞控传感器部分"><a href="#飞控传感器部分" class="headerlink" title="飞控传感器部分"></a>飞控传感器部分</h2><h3 id="气压计ICP-20100"><a href="#气压计ICP-20100" class="headerlink" title="气压计ICP-20100"></a>气压计ICP-20100</h3><p>datasheet中的典型电路：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250226201805401.png" alt="image-20250226201805401" title="">                </div>                <div class="image-caption">image-20250226201805401</div>            </figure><h2 id="飞控外设分配"><a href="#飞控外设分配" class="headerlink" title="飞控外设分配"></a>飞控外设分配</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250227202626796.png" alt="image-20250227202626796" title="">                </div>                <div class="image-caption">image-20250227202626796</div>            </figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://wiki.friendlyelec.com/wiki/index.php/SOM-RK3399/zh" target="_blank" rel="noopener">SOM-RK3399文档</a></li><li><a href="https://www.monolithicpower.com/en/documentview/productdocument/index/version/2/document_type/Datasheet/lang/en/sku/MP2236" target="_blank" rel="noopener">MP2236GJ-Z datasheet</a></li><li></li></ol><h2 id="附录1-芯片选择部分"><a href="#附录1-芯片选择部分" class="headerlink" title="附录1 芯片选择部分"></a>附录1 芯片选择部分</h2><p>芯片选型原则：</p><ol><li>有完整的芯片数据手册，有参考设计方案</li><li>最好有相应的封装库进行设计，但是如果使用lceda进行设计需要审核一下使用的封装是否正确</li><li>选择可以在电商平台买到的芯片进行设计</li></ol><h2 id="附录2-打板前CheckList"><a href="#附录2-打板前CheckList" class="headerlink" title="附录2 打板前CheckList"></a>附录2 打板前CheckList</h2><table><thead><tr><th>检查项</th><th>是否完成</th><th>备注</th></tr></thead><tbody><tr><td>电源电阻是否已经完成凑数</td><td>- [ ]</td><td></td></tr><tr><td>图传网卡需要独立出一块小板</td><td>- [ ]</td><td></td></tr><tr><td>MIPI屏幕在第一版上暂时取消</td><td>- [ ]</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;飞行器硬件设计&quot;&gt;&lt;a href=&quot;#飞行器硬件设计&quot; class=&quot;headerlink&quot; title=&quot;飞行器硬件设计&quot;&gt;&lt;/a&gt;飞行器硬件设计&lt;/h1&gt;&lt;p&gt;本文主要记录飞行器硬件设计的过程,以及一些问题记录.&lt;/p&gt;
&lt;p&gt;本飞行器旨在作为一个低成本的实验</summary>
      
    
    
    
    
    <category term="硬件,四轴" scheme="https://dailynobug.github.io/tags/%E7%A1%AC%E4%BB%B6-%E5%9B%9B%E8%BD%B4/"/>
    
  </entry>
  
  <entry>
    <title>run-ollama-in-docker</title>
    <link href="https://dailynobug.github.io/2025/01/15/run-ollama-in-docker/"/>
    <id>https://dailynobug.github.io/2025/01/15/run-ollama-in-docker/</id>
    <published>2025-01-15T15:06:31.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Run-Ollama-in-docker"><a href="#Run-Ollama-in-docker" class="headerlink" title="Run Ollama in docker"></a>Run Ollama in docker</h1><h2 id="install-nvidia-container-toolkit"><a href="#install-nvidia-container-toolkit" class="headerlink" title="install nvidia container toolkit"></a>install nvidia container toolkit</h2><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#installation" target="_blank" rel="noopener">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#installation</a></p><h3 id="Installing-with-Apt"><a href="#Installing-with-Apt" class="headerlink" title="Installing with Apt"></a>Installing with Apt</h3><ol><li><p>Configure the production repository:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;nvidia.github.io&#x2F;libnvidia-container&#x2F;gpgkey | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;nvidia-container-toolkit-keyring.gpg \</span><br><span class="line">  &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;libnvidia-container&#x2F;stable&#x2F;deb&#x2F;nvidia-container-toolkit.list | \</span><br><span class="line">    sed &#39;s#deb https:&#x2F;&#x2F;#deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;nvidia-container-toolkit-keyring.gpg] https:&#x2F;&#x2F;#g&#39; | \</span><br><span class="line">    sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-container-toolkit.list</span><br></pre></td></tr></table></figure><p>Optionally, configure the repository to use experimental packages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i -e &#39;&#x2F;experimental&#x2F; s&#x2F;^#&#x2F;&#x2F;g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-container-toolkit.list</span><br></pre></td></tr></table></figure></li><li><p>Update the packages list from the repository:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>Install the NVIDIA Container Toolkit packages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y nvidia-container-toolkit</span><br></pre></td></tr></table></figure></li></ol><h2 id="Start-the-container"><a href="#Start-the-container" class="headerlink" title="Start the container"></a>Start the container</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br></pre></td></tr></table></figure><h2 id="exec-the-container"><a href="#exec-the-container" class="headerlink" title="exec the container"></a>exec the container</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ollama /bin/bash</span><br></pre></td></tr></table></figure><h2 id="webui"><a href="#webui" class="headerlink" title="webui"></a>webui</h2><p>可以编写一个flask应用来实现简单的webui：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ollama API的基本URL</span></span><br><span class="line">OLLAMA_API_URL = <span class="string">"https://api.ollama.com/v1/generate"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;Chat with Ollama&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Welcome to the Chat Interface!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;form id="chatForm" method="post" action="/chat"&gt;</span></span><br><span class="line"><span class="string">                &lt;input type="text" name="message" placeholder="Type your message here..."&gt;</span></span><br><span class="line"><span class="string">                &lt;button type="submit"&gt;Send&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;div id="response"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;script&gt;</span></span><br><span class="line"><span class="string">                document.getElementById('chatForm').addEventListener('submit', function(e) &#123;</span></span><br><span class="line"><span class="string">                    e.preventDefault();</span></span><br><span class="line"><span class="string">                    const input = document.querySelector('input[name=message]');</span></span><br><span class="line"><span class="string">                    const xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">                    xhr.open("POST", "/chat");</span></span><br><span class="line"><span class="string">                    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");</span></span><br><span class="line"><span class="string">                    xhr.onload = function() &#123;</span></span><br><span class="line"><span class="string">                        if (xhr.status === 200) &#123;</span></span><br><span class="line"><span class="string">                            document.getElementById('response').innerText = xhr.responseText;</span></span><br><span class="line"><span class="string">                        &#125; else &#123;</span></span><br><span class="line"><span class="string">                            console.error("Request failed. Returned status of ", xhr.status);</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;;</span></span><br><span class="line"><span class="string">                    const formData = new FormData();</span></span><br><span class="line"><span class="string">                    formData.append("message", input.value);</span></span><br><span class="line"><span class="string">                    xhr.send(formData);</span></span><br><span class="line"><span class="string">                &#125;);</span></span><br><span class="line"><span class="string">            &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/chat', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chat</span><span class="params">()</span>:</span></span><br><span class="line">    user_input = request.form.get(<span class="string">'message'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建API请求参数</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'prompt'</span>: <span class="string">f"User: <span class="subst">&#123;user_input&#125;</span>\nAssistant:"</span>,</span><br><span class="line">        <span class="string">'model'</span>: <span class="string">"your_model_name_here"</span>,  <span class="comment"># 替换为你使用的模型名称</span></span><br><span class="line">        <span class="string">'max_new_tokens'</span>: <span class="number">100</span>  <span class="comment"># 设置生成的最大新令牌数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(OLLAMA_API_URL, json=payload)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        generated_text = response.json()[<span class="string">'choices'</span>][<span class="number">0</span>][<span class="string">'text'</span>]</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'response'</span>: generated_text&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'error'</span>: str(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>同时需要html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat with Ollama<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to the Chat Interface!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"chatForm"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/chat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"Type your message here..."</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"response"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'chatForm'</span>).addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">            e.preventDefault();</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'input[name=message]'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            xhr.open(<span class="string">"POST"</span>, <span class="string">"/chat"</span>);</span></span><br><span class="line"><span class="actionscript">            xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="actionscript">            xhr.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">                if (xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">'response'</span>).innerText = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.error(<span class="string">"Request failed. Returned status of "</span>, xhr.status);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">            formData.append(<span class="string">"message"</span>, input.value);</span></span><br><span class="line">            xhr.send(formData);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Run-Ollama-in-docker&quot;&gt;&lt;a href=&quot;#Run-Ollama-in-docker&quot; class=&quot;headerlink&quot; title=&quot;Run Ollama in docker&quot;&gt;&lt;/a&gt;Run Ollama in docker&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>uboot-1</title>
    <link href="https://dailynobug.github.io/2025/01/15/uboot-1/"/>
    <id>https://dailynobug.github.io/2025/01/15/uboot-1/</id>
    <published>2025-01-15T11:11:51.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UBOOT-学习笔记"><a href="#UBOOT-学习笔记" class="headerlink" title="UBOOT 学习笔记"></a>UBOOT 学习笔记</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><h3 id="1-上电与ROM代码执行"><a href="#1-上电与ROM代码执行" class="headerlink" title="1. 上电与ROM代码执行"></a>1. 上电与ROM代码执行</h3><ul><li><strong>上电后，ROM代码（BootROM）启动</strong>：这是存储在SoC中的固件，负责引导过程的第一阶段。它会从预定义的启动设备（如eMMC、SD卡、SPI Flash等）加载引导程序。</li></ul><h3 id="2-第一阶段引导加载器（SPL）"><a href="#2-第一阶段引导加载器（SPL）" class="headerlink" title="2. 第一阶段引导加载器（SPL）"></a>2. 第一阶段引导加载器（SPL）</h3><ul><li><strong>SPL（Secondary Program Loader）</strong>：通常是U-Boot的一个精简版本，负责初始化基本的硬件（如DDR内存），并加载U-Boot的完整版本。</li><li><strong>加载并执行U-Boot</strong>：SPL将U-Boot从存储设备加载到内存中，然后跳转到U-Boot的入口点。</li></ul><h3 id="3-U-Boot执行"><a href="#3-U-Boot执行" class="headerlink" title="3. U-Boot执行"></a>3. U-Boot执行</h3><ul><li><strong>硬件初始化</strong>：U-Boot完成更多的硬件初始化，包括设置时钟、初始化串口、配置网络等。</li><li><strong>设备树加载</strong>：加载设备树文件（DTB），这描述了硬件的配置和连接。</li><li><strong>选择引导源</strong>：根据环境变量或默认配置，选择从哪个设备加载操作系统内核（如eMMC、SD卡、网络等）。</li><li><strong>加载内核和initrd</strong>：将Linux内核和初始RAM盘（initrd&#x2F;initramfs）加载到内存中。</li><li><strong>设置内核参数</strong>：通过命令行参数向内核传递必要的信息（如根文件系统的位置）。</li></ul><h3 id="4-启动Linux内核"><a href="#4-启动Linux内核" class="headerlink" title="4. 启动Linux内核"></a>4. 启动Linux内核</h3><ul><li><strong>跳转到内核入口</strong>：U-Boot将控制权交给Linux内核，内核开始执行。</li><li><strong>内核初始化</strong>：Linux内核进行硬件检测和初始化，加载必要的驱动程序，并挂载根文件系统。</li></ul><h3 id="5-用户空间启动"><a href="#5-用户空间启动" class="headerlink" title="5. 用户空间启动"></a>5. 用户空间启动</h3><ul><li><strong>init进程启动</strong>：内核启动第一个用户空间进程（通常是<code>/sbin/init</code>），这开始了用户空间的初始化。</li><li><strong>启动服务和登录界面</strong>：根据系统配置，启动各种系统服务和提供用户登录界面。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UBOOT-学习笔记&quot;&gt;&lt;a href=&quot;#UBOOT-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;UBOOT 学习笔记&quot;&gt;&lt;/a&gt;UBOOT 学习笔记&lt;/h1&gt;&lt;h2 id=&quot;执行流程&quot;&gt;&lt;a href=&quot;#执行流程&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>open-project</title>
    <link href="https://dailynobug.github.io/2024/06/30/open-project/"/>
    <id>https://dailynobug.github.io/2024/06/30/open-project/</id>
    <published>2024-06-30T16:14:24.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源项目收集"><a href="#开源项目收集" class="headerlink" title="开源项目收集"></a>开源项目收集</h1><p>本文档收集一些有意思的开源项目：</p><h2 id="linenoise"><a href="#linenoise" class="headerlink" title="linenoise"></a><a href="https://github.com/antirez/linenoise" target="_blank" rel="noopener">linenoise</a></h2><p>linenoise 是一个轻量级、跨平台的 C 语言库，用于命令行输入的处理。该项目最初是由 Salvatore Sanfilippo (antirez) 创建的，以提供一个简单、高效的替代方案，取代 GNU Readline 和 libedit 库。linenoise 的设计目标是保持最小化的代码库，同时提供足够的功能以满足大多数命令行应用程序的需求。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>轻量级</strong>：linenoise 的代码非常简洁，仅包含几个文件，使其易于理解和维护。</li><li><strong>跨平台</strong>：支持多种操作系统，包括 Linux、MacOS 和 Windows。</li><li><strong>无依赖</strong>：不依赖于任何第三方库，仅使用标准 C 库函数。</li><li><strong>Unicode 支持</strong>：能够正确处理多字节字符和 Unicode 字符。</li><li><strong>历史记录管理</strong>：支持命令历史记录，可以方便地浏览和编辑之前输入的命令。</li><li><strong>自动补全</strong>：提供简单的自动补全功能，方便用户快速输入命令。</li></ol><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li><strong>行编辑</strong>：支持基本的行编辑功能，如删除、插入、左右移动光标等。</li><li><strong>历史记录</strong>：可以记录用户输入的历史命令，并在命令行中上下浏览历史记录。</li><li><strong>自动补全</strong>：通过提供回调函数，可以实现命令的自动补全功能。</li><li><strong>多行支持</strong>：能够正确处理和显示多行输入。</li></ul><p>链接：<a href="https://github.com/antirez/linenoise" target="_blank" rel="noopener">https://github.com/antirez/linenoise</a></p><h2 id="taipy"><a href="#taipy" class="headerlink" title="taipy"></a>taipy</h2><p>Taipy 是一个用于创建数据驱动应用程序的 Python 库。它旨在帮助开发者快速构建、部署和管理数据科学应用程序，简化了数据流的构建和用户界面的设计。Taipy 通过一组高效的工具和框架，提供了一种灵活且易于使用的方法来处理复杂的数据科学任务。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>易于使用</strong>：提供简洁的 API 和高层次的抽象，使得开发者能够快速上手，减少了编写样板代码的时间。</li><li><strong>灵活性</strong>：允许开发者自定义数据流和用户界面，以满足特定的业务需求。</li><li><strong>可视化</strong>：内置丰富的图表和可视化组件，使得数据展示和交互变得更加直观。</li><li><strong>扩展性</strong>：支持集成第三方库和工具，能够扩展其功能以适应更多的数据科学场景。</li><li><strong>高效性</strong>：优化了数据处理和流管理，确保应用程序在大数据环境下的高效运行。</li></ol><h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3><p>Taipy 包含几个关键组件，每个组件都专注于特定的功能领域：</p><ol><li><strong>Taipy Core</strong>：用于定义和管理数据流和任务调度的核心库。它帮助开发者设计数据处理管道，并确保任务按顺序执行。</li><li><strong>Taipy GUI</strong>：用于创建交互式用户界面的工具包。它提供了多种图表和控件，使得数据展示更加生动。</li><li><strong>Taipy Config</strong>：用于配置和管理应用程序设置的模块。它允许开发者灵活地定义和调整应用程序的行为。</li><li><strong>Taipy REST</strong>：用于构建 RESTful API 接口，使得应用程序可以轻松地与其他系统或服务进行通信。</li></ol><p>链接：<a href="https://github.com/Avaiga/taipy" target="_blank" rel="noopener">https://github.com/Avaiga/taipy</a></p><h2 id="kcp"><a href="#kcp" class="headerlink" title="kcp"></a>kcp</h2><p><a href="https://github.com/skywind3000/kcp" target="_blank" rel="noopener">https://github.com/skywind3000/kcp</a></p><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p><strong>KCP</strong> 是一个高效、轻量级的可靠 UDP 协议库，由开发者 <strong>skywind3000</strong> 创建并维护。它旨在通过 UDP 提供比 TCP 更低延迟、更灵活的数据传输能力，尤其适合对实时性要求高的场景（如游戏、实时音视频传输等）。</p><h3 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h3><ol><li><strong>低延迟设计</strong><ul><li>通过 <strong>ARQ（自动重传请求）</strong> 机制实现可靠传输，但优化了重传策略，减少等待时间。</li><li>对比 TCP 的“延迟 ACK”和“拥塞控制”，KCP 允许用户自定义参数（如 RTO、窗口大小），以平衡延迟与吞吐量。</li></ul></li><li><strong>高效传输</strong><ul><li>支持 <strong>选择性重传</strong>（仅重传丢失的包），而非传统 TCP 的“全部重传”。</li><li>提供 <strong>快速重传</strong> 机制，通过重复 ACK 快速检测丢包。</li></ul></li><li><strong>轻量与跨平台</strong><ul><li>纯 C 实现，代码简洁（核心代码约 1,000 行），易于集成到各类项目中。</li><li>支持 Windows、Linux、macOS 及移动端，并可嵌入到 C&#x2F;C++、Go、Rust 等语言生态。</li></ul></li><li><strong>灵活配置</strong><ul><li>提供多种模式（如普通模式、极速模式），用户可根据场景调整参数（如 <code>nodelay</code>、<code>interval</code>、<code>resend</code> 等）。</li></ul></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>游戏开发</strong>：MOBA、FPS 等对延迟敏感的游戏。</li><li><strong>实时通信</strong>：音视频流、直播、视频会议。</li><li><strong>物联网（IoT）</strong>：弱网环境下的设备间通信。</li><li><strong>P2P 网络</strong>：需要高效可靠传输的分布式系统。</li></ul><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><p>在相同带宽下，KCP 的延迟通常比 TCP 低 30%-40%，尤其在网络波动较大时表现更优。例如，在 10% 丢包率下，KCP 的吞吐量仍能接近理论最大值。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><strong>集成源码</strong>：直接包含 <code>ikcp.h</code> 和 <code>ikcp.c</code> 到项目中。</li><li><strong>配置参数</strong>：根据场景调整模式与参数（如 <code>ikcp_nodelay</code> 开启极速模式）。</li><li><strong>绑定 UDP Socket</strong>：通过回调函数与 UDP 结合，实现数据收发。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开源项目收集&quot;&gt;&lt;a href=&quot;#开源项目收集&quot; class=&quot;headerlink&quot; title=&quot;开源项目收集&quot;&gt;&lt;/a&gt;开源项目收集&lt;/h1&gt;&lt;p&gt;本文档收集一些有意思的开源项目：&lt;/p&gt;
&lt;h2 id=&quot;linenoise&quot;&gt;&lt;a href=&quot;#line</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hijack_mac</title>
    <link href="https://dailynobug.github.io/2024/06/17/hijack_mac/"/>
    <id>https://dailynobug.github.io/2024/06/17/hijack_mac/</id>
    <published>2024-06-17T01:17:51.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac地址欺骗"><a href="#mac地址欺骗" class="headerlink" title="mac地址欺骗"></a>mac地址欺骗</h1><h2 id="系统调用劫持"><a href="#系统调用劫持" class="headerlink" title="系统调用劫持"></a>系统调用劫持</h2><p>通过劫持系统调用，可以拦截和修改应用程序请求的硬件信息，如 MAC 地址。</p><h4 id="使用-LD-PRELOAD-劫持-getifaddrs-系统调用"><a href="#使用-LD-PRELOAD-劫持-getifaddrs-系统调用" class="headerlink" title="使用 LD_PRELOAD 劫持 getifaddrs 系统调用"></a>使用 <code>LD_PRELOAD</code> 劫持 <code>getifaddrs</code> 系统调用</h4><ol><li><p><strong>编写劫持库</strong>：</p><ul><li>创建一个共享库，劫持 <code>getifaddrs</code> 系统调用以返回伪造的 MAC 地址。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getifaddrs</span><span class="params">(struct ifaddrs **ifap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取原始的 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> (*original_getifaddrs)(struct ifaddrs **);</span><br><span class="line">    original_getifaddrs = dlsym(RTLD_NEXT, <span class="string">"getifaddrs"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用原始 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> result = original_getifaddrs(ifap);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印调试信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getifaddrs called\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历接口列表并修改 MAC 地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifa</span> = *<span class="title">ifap</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (ifa) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ifa-&gt;ifa_addr &amp;&amp; ifa-&gt;ifa_addr-&gt;sa_family == AF_PACKET) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">sockaddr_ll</span> *)<span class="title">ifa</span>-&gt;<span class="title">ifa_addr</span>;</span></span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            s-&gt;sll_addr[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifa-&gt;ifa_name);</span><br><span class="line">        &#125;</span><br><span class="line">        ifa = ifa-&gt;ifa_next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编译共享库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -o libspoof_mac.so spoof_mac.c -ldl</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>LD_PRELOAD</code> 运行目标程序</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=./libspoof_mac.so ./target_program</span><br></pre></td></tr></table></figure></li></ol><p>如果出现mac地址欺骗未成功，可以尝试劫持其他相关系统调用，例如 <code>ioctl</code></p><p><code>SIOCGIFHWADDR</code> 是一个特定的 <code>ioctl</code> 请求码，用于获取网络接口的硬件地址（MAC 地址）。<code>ioctl</code> 是一个通用的输入&#x2F;输出控制接口，可以对设备文件进行各种操作，而 <code>SIOCGIFHWADDR</code> 则专门用于网络设备。</p><h3 id="SIOCGIFHWADDR-的使用"><a href="#SIOCGIFHWADDR-的使用" class="headerlink" title="SIOCGIFHWADDR 的使用"></a><code>SIOCGIFHWADDR</code> 的使用</h3><p>当一个程序想要获取某个网络接口的 MAC 地址时，会使用 <code>ioctl</code> 系统调用并传递 <code>SIOCGIFHWADDR</code> 请求码。这个请求码指示内核返回指定网络接口的硬件地址。</p><h3 id="请求的结构"><a href="#请求的结构" class="headerlink" title="请求的结构"></a>请求的结构</h3><p>在使用 <code>SIOCGIFHWADDR</code> 请求时，通常需要一个 <code>struct ifreq</code> 结构体作为参数。该结构体定义在 <code>&lt;net/if.h&gt;</code> 头文件中，主要包含网络接口的名称和相关信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义劫持的 ioctl 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(*original_ioctl)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, ...)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!original_ioctl) &#123;</span><br><span class="line">        original_ioctl = dlsym(RTLD_NEXT, <span class="string">"ioctl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request == SIOCGIFHWADDR) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> *<span class="title">ifr</span> = <span class="title">va_arg</span>(<span class="title">args</span>, <span class="title">struct</span> <span class="title">ifreq</span> *);</span></span><br><span class="line">        ret = original_ioctl(fd, request, ifr);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Intercepted SIOCGIFHWADDR for interface: %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = original_ioctl(fd, request, va_arg(args, <span class="keyword">void</span> *));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac地址欺骗&quot;&gt;&lt;a href=&quot;#mac地址欺骗&quot; class=&quot;headerlink&quot; title=&quot;mac地址欺骗&quot;&gt;&lt;/a&gt;mac地址欺骗&lt;/h1&gt;&lt;h2 id=&quot;系统调用劫持&quot;&gt;&lt;a href=&quot;#系统调用劫持&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>泰山派调试常用命令</title>
    <link href="https://dailynobug.github.io/2024/06/17/%E6%B3%B0%E5%B1%B1%E6%B4%BE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://dailynobug.github.io/2024/06/17/%E6%B3%B0%E5%B1%B1%E6%B4%BE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-06-17T01:17:51.000Z</published>
    <updated>2025-04-15T15:28:34.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泰山派调试常用命令"><a href="#泰山派调试常用命令" class="headerlink" title="泰山派调试常用命令"></a>泰山派调试常用命令</h1><h2 id="ubuntu下使用命令行连接wifi"><a href="#ubuntu下使用命令行连接wifi" class="headerlink" title="ubuntu下使用命令行连接wifi"></a>ubuntu下使用命令行连接wifi</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo iwlist scan</span><br><span class="line">nmcli device wifi list</span><br><span class="line">nmcli device wifi connect &#123;ESSID&#125; password &#123;PASSWORD&#125;</span><br><span class="line">nmcli device wifi connect 404_2.4g password &quot;@404@404&quot; </span><br><span class="line">nmcli device wifi connect &quot;404_5g&quot; password &quot;@404@404@404&quot; ifname wlan0</span><br><span class="line">make modules_install INSTALL_MOD_PATH&#x3D;&lt;rootfs_path&gt;</span><br></pre></td></tr></table></figure><p><img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250305184418243.png" alt="image-20250305184418243"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250305184418243.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250305184435807.png" alt="image-20250305184435807" title="">                </div>                <div class="image-caption">image-20250305184435807</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/image-20250305184444185.png" alt="image-20250305184444185" title="">                </div>                <div class="image-caption">image-20250305184444185</div>            </figure><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> v4l2-ctl --list-devices</span><br><span class="line">v4l2-ctl --list-formats-ext --device=/dev/video0</span><br><span class="line">v4l2-ctl -d /dev/video0 -L</span><br><span class="line">v4l2-ctl --set-ctrl analogue_gain=80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v4l2-ctl --verbose -d /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat='UYVY' --stream-mmap=20 --set-selection=target=crop,flags=0,top=0,left=0,width=1920,height=1080 --set-ctrl analogue_gain=80  --stream-to=/tmp/out.yuv</span><br><span class="line"></span><br><span class="line">v4l2-ctl --verbose -d /dev/video1 --set-fmt-video=width=1920,height=1080,pixelformat='UYVY' --stream-mmap=20 --stream-to=/tmp/out.yuv</span><br><span class="line"></span><br><span class="line">ffmpeg -f v4l2 -input_format nv12 -video_size 1920x1080 -i /dev/video0 -c:v libx264 -preset ultrafast output.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -f v4l2 -i /dev/video0 -pixel_format yuv422p -framerate 15 -video_size 800x600 -c:v copy -f mpegts udp://@:1234</span><br><span class="line"></span><br><span class="line">ffmpeg -f v4l2 -input_format nv12 -video_size 1920x1080 -i /dev/video8 -t 10 output.yuv</span><br><span class="line"></span><br><span class="line">ffmpeg -f rawvideo -pixel_format yuv422p -video_size 3840x2160 -framerate 24 -i out.yuv -c:v libx264 output.mp4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scp lsc@192.168.115.129:/home/lsc/project/Release/kernel/boot.img ./</span><br></pre></td></tr></table></figure><h2 id="硬件编码测试"><a href="#硬件编码测试" class="headerlink" title="硬件编码测试"></a>硬件编码测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置 ---</span></span><br><span class="line">TARGET_IP = <span class="string">"192.168.3.71"</span>  <span class="comment"># 接收端电脑的 IP 地址 (运行 OBS 的电脑)</span></span><br><span class="line">TARGET_PORT = <span class="number">1234</span>          <span class="comment"># 目标 UDP 端口 (与 OBS 设置一致)</span></span><br><span class="line">CAMERA_INDEX = <span class="number">0</span>            <span class="comment"># 摄像头的索引 (通常是 0 或 1)</span></span><br><span class="line">JPEG_QUALITY = <span class="number">70</span>           <span class="comment"># JPEG 编码质量 (0-100, 越高画质越好但数据量越大)</span></span><br><span class="line">SEND_RESOLUTION = (<span class="number">640</span>, <span class="number">480</span>) <span class="comment"># 发送的分辨率 (宽, 高)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 初始化 ---</span></span><br><span class="line"><span class="comment"># 创建 UDP socket</span></span><br><span class="line">udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(CAMERA_INDEX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">    print(<span class="string">f"错误：无法打开摄像头索引 <span class="subst">&#123;CAMERA_INDEX&#125;</span>"</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置摄像头分辨率 (可选, 尝试设置)</span></span><br><span class="line"><span class="comment"># cap.set(cv2.CAP_PROP_FRAME_WIDTH, SEND_RESOLUTION[0])</span></span><br><span class="line"><span class="comment"># cap.set(cv2.CAP_PROP_FRAME_HEIGHT, SEND_RESOLUTION[1])</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f"摄像头已打开。将推流到 UDP <span class="subst">&#123;TARGET_IP&#125;</span>:<span class="subst">&#123;TARGET_PORT&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"发送分辨率: <span class="subst">&#123;SEND_RESOLUTION&#125;</span>, JPEG 质量: <span class="subst">&#123;JPEG_QUALITY&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">"按 Ctrl+C 停止推流。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 读取一帧</span></span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            print(<span class="string">"错误：无法读取摄像头帧。"</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>) <span class="comment"># 等待一下再试</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调整帧大小</span></span><br><span class="line">        frame_resized = cv2.resize(frame, SEND_RESOLUTION)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将帧编码为 JPEG</span></span><br><span class="line">        encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), JPEG_QUALITY]</span><br><span class="line">        result, encoded_frame = cv2.imencode(<span class="string">'.jpg'</span>, frame_resized, encode_param)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            print(<span class="string">"错误：JPEG 编码失败。"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将编码后的数据转换为字节</span></span><br><span class="line">        data = encoded_frame.tobytes()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        <span class="comment"># UDP 对于数据包大小有限制 (通常 &lt; 65507 字节)</span></span><br><span class="line">        <span class="comment"># 如果编码后的帧太大，可能会发送失败或被截断</span></span><br><span class="line">        <span class="keyword">if</span> len(data) &gt; <span class="number">65000</span>:</span><br><span class="line">            print(<span class="string">f"警告：帧数据过大 (<span class="subst">&#123;len(data)&#125;</span> 字节)，可能无法完整发送。尝试降低分辨率或 JPEG 质量。"</span>)</span><br><span class="line">            <span class="comment"># 可以选择跳过此帧或尝试发送</span></span><br><span class="line">            <span class="comment"># continue # 选择跳过</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            udp_socket.sendto(data, (TARGET_IP, TARGET_PORT))</span><br><span class="line">            <span class="comment"># print(f"Sent frame: &#123;len(data)&#125; bytes") # 取消注释以查看发送日志</span></span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f"发送错误: <span class="subst">&#123;e&#125;</span>"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>) <span class="comment"># 发送失败时稍作等待</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># (可选) 稍微降低帧率，减轻 CPU 负担和网络拥堵</span></span><br><span class="line">        <span class="comment"># time.sleep(0.01) # 约等于 100 FPS 的延迟，根据需要调整</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">"\n停止推流..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 清理资源</span></span><br><span class="line">    print(<span class="string">"正在释放资源..."</span>)</span><br><span class="line">    cap.release()</span><br><span class="line">    udp_socket.close()</span><br><span class="line">    cv2.destroyAllWindows() <span class="comment"># 如果在开发板上有显示窗口的话</span></span><br><span class="line">    print(<span class="string">"资源已释放。"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-&gt; Device Drivers                                                                                                                                                                                    │</span><br><span class="line">  │       -&gt; Multimedia support (MEDIA_SUPPORT [=y])                                                                                                                                                         │</span><br><span class="line">  │         -&gt; Media drivers                                                                                                                                                                                 │</span><br><span class="line">  │ (1)       -&gt; V4L platform devices (V4L_PLATFORM_DRIVERS [=y])</span><br></pre></td></tr></table></figure><p>pip install opencv-python numpy</p><p>sudo apt install -y libgl1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泰山派调试常用命令&quot;&gt;&lt;a href=&quot;#泰山派调试常用命令&quot; class=&quot;headerlink&quot; title=&quot;泰山派调试常用命令&quot;&gt;&lt;/a&gt;泰山派调试常用命令&lt;/h1&gt;&lt;h2 id=&quot;ubuntu下使用命令行连接wifi&quot;&gt;&lt;a href=&quot;#ubuntu下</summary>
      
    
    
    
    
  </entry>
  
</feed>
