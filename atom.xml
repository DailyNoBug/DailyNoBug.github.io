<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SCBLOG</title>
  <icon>https://www.gravatar.com/avatar/9f422c1be5ea2e238d8111cbc5a2a032</icon>
  
  <link href="https://daydaynobug.me/atom.xml" rel="self"/>
  
  <link href="https://daydaynobug.me/"/>
  <updated>2024-06-16T18:48:39.772Z</updated>
  <id>https://daydaynobug.me/</id>
  
  <author>
    <name>black liu</name>
    <email>liusc0616@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hijack_mac</title>
    <link href="https://daydaynobug.me/2024/06/17/hijack_mac/"/>
    <id>https://daydaynobug.me/2024/06/17/hijack_mac/</id>
    <published>2024-06-16T17:17:51.000Z</published>
    <updated>2024-06-16T18:48:39.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac地址欺骗"><a href="#mac地址欺骗" class="headerlink" title="mac地址欺骗"></a>mac地址欺骗</h1><h2 id="系统调用劫持"><a href="#系统调用劫持" class="headerlink" title="系统调用劫持"></a>系统调用劫持</h2><p>通过劫持系统调用，可以拦截和修改应用程序请求的硬件信息，如 MAC 地址。</p><h4 id="使用-LD-PRELOAD-劫持-getifaddrs-系统调用"><a href="#使用-LD-PRELOAD-劫持-getifaddrs-系统调用" class="headerlink" title="使用 LD_PRELOAD 劫持 getifaddrs 系统调用"></a>使用 <code>LD_PRELOAD</code> 劫持 <code>getifaddrs</code> 系统调用</h4><ol><li><p><strong>编写劫持库</strong>：</p><ul><li>创建一个共享库，劫持 <code>getifaddrs</code> 系统调用以返回伪造的 MAC 地址。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getifaddrs</span><span class="params">(struct ifaddrs **ifap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取原始的 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> (*original_getifaddrs)(struct ifaddrs **);</span><br><span class="line">    original_getifaddrs = dlsym(RTLD_NEXT, <span class="string">"getifaddrs"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用原始 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> result = original_getifaddrs(ifap);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印调试信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getifaddrs called\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历接口列表并修改 MAC 地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifa</span> = *<span class="title">ifap</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (ifa) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ifa-&gt;ifa_addr &amp;&amp; ifa-&gt;ifa_addr-&gt;sa_family == AF_PACKET) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">sockaddr_ll</span> *)<span class="title">ifa</span>-&gt;<span class="title">ifa_addr</span>;</span></span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            s-&gt;sll_addr[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifa-&gt;ifa_name);</span><br><span class="line">        &#125;</span><br><span class="line">        ifa = ifa-&gt;ifa_next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编译共享库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -o libspoof_mac.so spoof_mac.c -ldl</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>LD_PRELOAD</code> 运行目标程序</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=./libspoof_mac.so ./target_program</span><br></pre></td></tr></table></figure></li></ol><p>如果出现mac地址欺骗未成功，可以尝试劫持其他相关系统调用，例如 <code>ioctl</code></p><p><code>SIOCGIFHWADDR</code> 是一个特定的 <code>ioctl</code> 请求码，用于获取网络接口的硬件地址（MAC 地址）。<code>ioctl</code> 是一个通用的输入&#x2F;输出控制接口，可以对设备文件进行各种操作，而 <code>SIOCGIFHWADDR</code> 则专门用于网络设备。</p><h3 id="SIOCGIFHWADDR-的使用"><a href="#SIOCGIFHWADDR-的使用" class="headerlink" title="SIOCGIFHWADDR 的使用"></a><code>SIOCGIFHWADDR</code> 的使用</h3><p>当一个程序想要获取某个网络接口的 MAC 地址时，会使用 <code>ioctl</code> 系统调用并传递 <code>SIOCGIFHWADDR</code> 请求码。这个请求码指示内核返回指定网络接口的硬件地址。</p><h3 id="请求的结构"><a href="#请求的结构" class="headerlink" title="请求的结构"></a>请求的结构</h3><p>在使用 <code>SIOCGIFHWADDR</code> 请求时，通常需要一个 <code>struct ifreq</code> 结构体作为参数。该结构体定义在 <code>&lt;net/if.h&gt;</code> 头文件中，主要包含网络接口的名称和相关信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义劫持的 ioctl 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(*original_ioctl)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, ...)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!original_ioctl) &#123;</span><br><span class="line">        original_ioctl = dlsym(RTLD_NEXT, <span class="string">"ioctl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request == SIOCGIFHWADDR) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> *<span class="title">ifr</span> = <span class="title">va_arg</span>(<span class="title">args</span>, <span class="title">struct</span> <span class="title">ifreq</span> *);</span></span><br><span class="line">        ret = original_ioctl(fd, request, ifr);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Intercepted SIOCGIFHWADDR for interface: %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = original_ioctl(fd, request, va_arg(args, <span class="keyword">void</span> *));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac地址欺骗&quot;&gt;&lt;a href=&quot;#mac地址欺骗&quot; class=&quot;headerlink&quot; title=&quot;mac地址欺骗&quot;&gt;&lt;/a&gt;mac地址欺骗&lt;/h1&gt;&lt;h2 id=&quot;系统调用劫持&quot;&gt;&lt;a href=&quot;#系统调用劫持&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
</feed>
