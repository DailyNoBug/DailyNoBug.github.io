<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SCBLOG</title>
  <icon>https://www.gravatar.com/avatar/9f422c1be5ea2e238d8111cbc5a2a032</icon>
  
  <link href="https://daydaynobug.me/atom.xml" rel="self"/>
  
  <link href="https://daydaynobug.me/"/>
  <updated>2025-02-19T06:36:12.842Z</updated>
  <id>https://daydaynobug.me/</id>
  
  <author>
    <name>black liu</name>
    <email>liusc0616@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MFly-Hardware</title>
    <link href="https://daydaynobug.me/2025/02/19/MFly-Hardware/"/>
    <id>https://daydaynobug.me/2025/02/19/MFly-Hardware/</id>
    <published>2025-02-19T10:12:21.000Z</published>
    <updated>2025-02-19T06:36:12.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="飞行器硬件设计"><a href="#飞行器硬件设计" class="headerlink" title="飞行器硬件设计"></a>飞行器硬件设计</h1><p>本文主要记录飞行器硬件设计的过程,以及一些问题记录.</p><p>本飞行器旨在作为一个低成本的实验平台完成相关算法和工程落地实践</p><h2 id="飞行器硬件拓扑"><a href="#飞行器硬件拓扑" class="headerlink" title="飞行器硬件拓扑"></a>飞行器硬件拓扑</h2><h3 id="飞机整体硬件拓扑"><a href="#飞机整体硬件拓扑" class="headerlink" title="飞机整体硬件拓扑"></a>飞机整体硬件拓扑</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/%E9%A3%9E%E8%A1%8C%E5%99%A8%E7%BB%93%E6%9E%84%E5%9B%BE.drawio.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="飞控硬件拓扑"><a href="#飞控硬件拓扑" class="headerlink" title="飞控硬件拓扑"></a>飞控硬件拓扑</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/4-1%E9%A3%9E%E6%8E%A7%E7%BB%93%E6%9E%84%E5%9B%BE.drawio.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="遥控器硬件拓扑"><a href="#遥控器硬件拓扑" class="headerlink" title="遥控器硬件拓扑"></a>遥控器硬件拓扑</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tuchuang-e682.obs.cn-north-1.myhuaweicloud.com/%E9%81%A5%E6%8E%A7%E5%99%A8%E7%BB%93%E6%9E%84.drawio.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="飞控MCU域硬件设计"><a href="#飞控MCU域硬件设计" class="headerlink" title="飞控MCU域硬件设计"></a>飞控MCU域硬件设计</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;飞行器硬件设计&quot;&gt;&lt;a href=&quot;#飞行器硬件设计&quot; class=&quot;headerlink&quot; title=&quot;飞行器硬件设计&quot;&gt;&lt;/a&gt;飞行器硬件设计&lt;/h1&gt;&lt;p&gt;本文主要记录飞行器硬件设计的过程,以及一些问题记录.&lt;/p&gt;
&lt;p&gt;本飞行器旨在作为一个低成本的实验</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>open-project</title>
    <link href="https://daydaynobug.me/2024/06/30/open-project/"/>
    <id>https://daydaynobug.me/2024/06/30/open-project/</id>
    <published>2024-06-30T16:14:24.000Z</published>
    <updated>2025-02-19T06:36:12.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源项目收集"><a href="#开源项目收集" class="headerlink" title="开源项目收集"></a>开源项目收集</h1><p>本文档收集一些有意思的开源项目：</p><h2 id="linenoise"><a href="#linenoise" class="headerlink" title="linenoise"></a><a href="https://github.com/antirez/linenoise" target="_blank" rel="noopener">linenoise</a></h2><p>linenoise 是一个轻量级、跨平台的 C 语言库，用于命令行输入的处理。该项目最初是由 Salvatore Sanfilippo (antirez) 创建的，以提供一个简单、高效的替代方案，取代 GNU Readline 和 libedit 库。linenoise 的设计目标是保持最小化的代码库，同时提供足够的功能以满足大多数命令行应用程序的需求。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>轻量级</strong>：linenoise 的代码非常简洁，仅包含几个文件，使其易于理解和维护。</li><li><strong>跨平台</strong>：支持多种操作系统，包括 Linux、MacOS 和 Windows。</li><li><strong>无依赖</strong>：不依赖于任何第三方库，仅使用标准 C 库函数。</li><li><strong>Unicode 支持</strong>：能够正确处理多字节字符和 Unicode 字符。</li><li><strong>历史记录管理</strong>：支持命令历史记录，可以方便地浏览和编辑之前输入的命令。</li><li><strong>自动补全</strong>：提供简单的自动补全功能，方便用户快速输入命令。</li></ol><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li><strong>行编辑</strong>：支持基本的行编辑功能，如删除、插入、左右移动光标等。</li><li><strong>历史记录</strong>：可以记录用户输入的历史命令，并在命令行中上下浏览历史记录。</li><li><strong>自动补全</strong>：通过提供回调函数，可以实现命令的自动补全功能。</li><li><strong>多行支持</strong>：能够正确处理和显示多行输入。</li></ul><p>链接：<a href="https://github.com/antirez/linenoise" target="_blank" rel="noopener">https://github.com/antirez/linenoise</a></p><h2 id="taipy"><a href="#taipy" class="headerlink" title="taipy"></a>taipy</h2><p>Taipy 是一个用于创建数据驱动应用程序的 Python 库。它旨在帮助开发者快速构建、部署和管理数据科学应用程序，简化了数据流的构建和用户界面的设计。Taipy 通过一组高效的工具和框架，提供了一种灵活且易于使用的方法来处理复杂的数据科学任务。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>易于使用</strong>：提供简洁的 API 和高层次的抽象，使得开发者能够快速上手，减少了编写样板代码的时间。</li><li><strong>灵活性</strong>：允许开发者自定义数据流和用户界面，以满足特定的业务需求。</li><li><strong>可视化</strong>：内置丰富的图表和可视化组件，使得数据展示和交互变得更加直观。</li><li><strong>扩展性</strong>：支持集成第三方库和工具，能够扩展其功能以适应更多的数据科学场景。</li><li><strong>高效性</strong>：优化了数据处理和流管理，确保应用程序在大数据环境下的高效运行。</li></ol><h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3><p>Taipy 包含几个关键组件，每个组件都专注于特定的功能领域：</p><ol><li><strong>Taipy Core</strong>：用于定义和管理数据流和任务调度的核心库。它帮助开发者设计数据处理管道，并确保任务按顺序执行。</li><li><strong>Taipy GUI</strong>：用于创建交互式用户界面的工具包。它提供了多种图表和控件，使得数据展示更加生动。</li><li><strong>Taipy Config</strong>：用于配置和管理应用程序设置的模块。它允许开发者灵活地定义和调整应用程序的行为。</li><li><strong>Taipy REST</strong>：用于构建 RESTful API 接口，使得应用程序可以轻松地与其他系统或服务进行通信。</li></ol><p>链接：<a href="https://github.com/Avaiga/taipy" target="_blank" rel="noopener">https://github.com/Avaiga/taipy</a></p><h2 id="kcp"><a href="#kcp" class="headerlink" title="kcp"></a>kcp</h2><p><a href="https://github.com/skywind3000/kcp" target="_blank" rel="noopener">https://github.com/skywind3000/kcp</a></p><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p><strong>KCP</strong> 是一个高效、轻量级的可靠 UDP 协议库，由开发者 <strong>skywind3000</strong> 创建并维护。它旨在通过 UDP 提供比 TCP 更低延迟、更灵活的数据传输能力，尤其适合对实时性要求高的场景（如游戏、实时音视频传输等）。</p><h3 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h3><ol><li><strong>低延迟设计</strong><ul><li>通过 <strong>ARQ（自动重传请求）</strong> 机制实现可靠传输，但优化了重传策略，减少等待时间。</li><li>对比 TCP 的“延迟 ACK”和“拥塞控制”，KCP 允许用户自定义参数（如 RTO、窗口大小），以平衡延迟与吞吐量。</li></ul></li><li><strong>高效传输</strong><ul><li>支持 <strong>选择性重传</strong>（仅重传丢失的包），而非传统 TCP 的“全部重传”。</li><li>提供 <strong>快速重传</strong> 机制，通过重复 ACK 快速检测丢包。</li></ul></li><li><strong>轻量与跨平台</strong><ul><li>纯 C 实现，代码简洁（核心代码约 1,000 行），易于集成到各类项目中。</li><li>支持 Windows、Linux、macOS 及移动端，并可嵌入到 C&#x2F;C++、Go、Rust 等语言生态。</li></ul></li><li><strong>灵活配置</strong><ul><li>提供多种模式（如普通模式、极速模式），用户可根据场景调整参数（如 <code>nodelay</code>、<code>interval</code>、<code>resend</code> 等）。</li></ul></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>游戏开发</strong>：MOBA、FPS 等对延迟敏感的游戏。</li><li><strong>实时通信</strong>：音视频流、直播、视频会议。</li><li><strong>物联网（IoT）</strong>：弱网环境下的设备间通信。</li><li><strong>P2P 网络</strong>：需要高效可靠传输的分布式系统。</li></ul><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><p>在相同带宽下，KCP 的延迟通常比 TCP 低 30%-40%，尤其在网络波动较大时表现更优。例如，在 10% 丢包率下，KCP 的吞吐量仍能接近理论最大值。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><strong>集成源码</strong>：直接包含 <code>ikcp.h</code> 和 <code>ikcp.c</code> 到项目中。</li><li><strong>配置参数</strong>：根据场景调整模式与参数（如 <code>ikcp_nodelay</code> 开启极速模式）。</li><li><strong>绑定 UDP Socket</strong>：通过回调函数与 UDP 结合，实现数据收发。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开源项目收集&quot;&gt;&lt;a href=&quot;#开源项目收集&quot; class=&quot;headerlink&quot; title=&quot;开源项目收集&quot;&gt;&lt;/a&gt;开源项目收集&lt;/h1&gt;&lt;p&gt;本文档收集一些有意思的开源项目：&lt;/p&gt;
&lt;h2 id=&quot;linenoise&quot;&gt;&lt;a href=&quot;#line</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hijack_mac</title>
    <link href="https://daydaynobug.me/2024/06/17/hijack_mac/"/>
    <id>https://daydaynobug.me/2024/06/17/hijack_mac/</id>
    <published>2024-06-17T01:17:51.000Z</published>
    <updated>2025-02-19T06:36:12.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac地址欺骗"><a href="#mac地址欺骗" class="headerlink" title="mac地址欺骗"></a>mac地址欺骗</h1><h2 id="系统调用劫持"><a href="#系统调用劫持" class="headerlink" title="系统调用劫持"></a>系统调用劫持</h2><p>通过劫持系统调用，可以拦截和修改应用程序请求的硬件信息，如 MAC 地址。</p><h4 id="使用-LD-PRELOAD-劫持-getifaddrs-系统调用"><a href="#使用-LD-PRELOAD-劫持-getifaddrs-系统调用" class="headerlink" title="使用 LD_PRELOAD 劫持 getifaddrs 系统调用"></a>使用 <code>LD_PRELOAD</code> 劫持 <code>getifaddrs</code> 系统调用</h4><ol><li><p><strong>编写劫持库</strong>：</p><ul><li>创建一个共享库，劫持 <code>getifaddrs</code> 系统调用以返回伪造的 MAC 地址。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getifaddrs</span><span class="params">(struct ifaddrs **ifap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取原始的 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> (*original_getifaddrs)(struct ifaddrs **);</span><br><span class="line">    original_getifaddrs = dlsym(RTLD_NEXT, <span class="string">"getifaddrs"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用原始 getifaddrs 函数</span></span><br><span class="line">    <span class="keyword">int</span> result = original_getifaddrs(ifap);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印调试信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getifaddrs called\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历接口列表并修改 MAC 地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifa</span> = *<span class="title">ifap</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (ifa) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ifa-&gt;ifa_addr &amp;&amp; ifa-&gt;ifa_addr-&gt;sa_family == AF_PACKET) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">sockaddr_ll</span> *)<span class="title">ifa</span>-&gt;<span class="title">ifa_addr</span>;</span></span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            s-&gt;sll_addr[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            s-&gt;sll_addr[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifa-&gt;ifa_name);</span><br><span class="line">        &#125;</span><br><span class="line">        ifa = ifa-&gt;ifa_next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编译共享库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -o libspoof_mac.so spoof_mac.c -ldl</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>LD_PRELOAD</code> 运行目标程序</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=./libspoof_mac.so ./target_program</span><br></pre></td></tr></table></figure></li></ol><p>如果出现mac地址欺骗未成功，可以尝试劫持其他相关系统调用，例如 <code>ioctl</code></p><p><code>SIOCGIFHWADDR</code> 是一个特定的 <code>ioctl</code> 请求码，用于获取网络接口的硬件地址（MAC 地址）。<code>ioctl</code> 是一个通用的输入&#x2F;输出控制接口，可以对设备文件进行各种操作，而 <code>SIOCGIFHWADDR</code> 则专门用于网络设备。</p><h3 id="SIOCGIFHWADDR-的使用"><a href="#SIOCGIFHWADDR-的使用" class="headerlink" title="SIOCGIFHWADDR 的使用"></a><code>SIOCGIFHWADDR</code> 的使用</h3><p>当一个程序想要获取某个网络接口的 MAC 地址时，会使用 <code>ioctl</code> 系统调用并传递 <code>SIOCGIFHWADDR</code> 请求码。这个请求码指示内核返回指定网络接口的硬件地址。</p><h3 id="请求的结构"><a href="#请求的结构" class="headerlink" title="请求的结构"></a>请求的结构</h3><p>在使用 <code>SIOCGIFHWADDR</code> 请求时，通常需要一个 <code>struct ifreq</code> 结构体作为参数。该结构体定义在 <code>&lt;net/if.h&gt;</code> 头文件中，主要包含网络接口的名称和相关信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netpacket/packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义劫持的 ioctl 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(*original_ioctl)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, ...)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!original_ioctl) &#123;</span><br><span class="line">        original_ioctl = dlsym(RTLD_NEXT, <span class="string">"ioctl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request == SIOCGIFHWADDR) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> *<span class="title">ifr</span> = <span class="title">va_arg</span>(<span class="title">args</span>, <span class="title">struct</span> <span class="title">ifreq</span> *);</span></span><br><span class="line">        ret = original_ioctl(fd, request, ifr);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Intercepted SIOCGIFHWADDR for interface: %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">            <span class="comment">// 修改 MAC 地址</span></span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">1</span>] = <span class="number">0x42</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">2</span>] = <span class="number">0xac</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">3</span>] = <span class="number">0x11</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">4</span>] = <span class="number">0x00</span>;</span><br><span class="line">            ifr-&gt;ifr_hwaddr.sa_data[<span class="number">5</span>] = <span class="number">0x02</span>;</span><br><span class="line">            <span class="comment">// 打印调试信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Modified MAC address for interface %s\n"</span>, ifr-&gt;ifr_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = original_ioctl(fd, request, va_arg(args, <span class="keyword">void</span> *));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac地址欺骗&quot;&gt;&lt;a href=&quot;#mac地址欺骗&quot; class=&quot;headerlink&quot; title=&quot;mac地址欺骗&quot;&gt;&lt;/a&gt;mac地址欺骗&lt;/h1&gt;&lt;h2 id=&quot;系统调用劫持&quot;&gt;&lt;a href=&quot;#系统调用劫持&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
</feed>
