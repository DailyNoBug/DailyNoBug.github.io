[{"title":"hijack_mac","date":"2024-06-16T17:17:51.000Z","path":"2024/06/17/hijack_mac/","text":"mac地址欺骗系统调用劫持通过劫持系统调用，可以拦截和修改应用程序请求的硬件信息，如 MAC 地址。 使用 LD_PRELOAD 劫持 getifaddrs 系统调用 编写劫持库： 创建一个共享库，劫持 getifaddrs 系统调用以返回伪造的 MAC 地址。 1234567891011121314151617181920212223242526272829303132333435363738394041#define _GNU_SOURCE#include &lt;dlfcn.h&gt;#include &lt;ifaddrs.h&gt;#include &lt;netpacket/packet.h&gt;#include &lt;net/if.h&gt;#include &lt;stdio.h&gt;int getifaddrs(struct ifaddrs **ifap) &#123; // 获取原始的 getifaddrs 函数 int (*original_getifaddrs)(struct ifaddrs **); original_getifaddrs = dlsym(RTLD_NEXT, \"getifaddrs\"); // 调用原始 getifaddrs 函数 int result = original_getifaddrs(ifap); if (result != 0) &#123; return result; &#125; // 打印调试信息 printf(\"getifaddrs called\\n\"); // 遍历接口列表并修改 MAC 地址 struct ifaddrs *ifa = *ifap; while (ifa) &#123; if (ifa-&gt;ifa_addr &amp;&amp; ifa-&gt;ifa_addr-&gt;sa_family == AF_PACKET) &#123; struct sockaddr_ll *s = (struct sockaddr_ll *)ifa-&gt;ifa_addr; // 修改 MAC 地址 s-&gt;sll_addr[0] = 0x02; s-&gt;sll_addr[1] = 0x42; s-&gt;sll_addr[2] = 0xac; s-&gt;sll_addr[3] = 0x11; s-&gt;sll_addr[4] = 0x00; s-&gt;sll_addr[5] = 0x02; // 打印调试信息 printf(\"Modified MAC address for interface %s\\n\", ifa-&gt;ifa_name); &#125; ifa = ifa-&gt;ifa_next; &#125; return result;&#125; 编译共享库： 1gcc -shared -fPIC -o libspoof_mac.so spoof_mac.c -ldl 使用 LD_PRELOAD 运行目标程序： 1LD_PRELOAD=./libspoof_mac.so ./target_program 如果出现mac地址欺骗未成功，可以尝试劫持其他相关系统调用，例如 ioctl SIOCGIFHWADDR 是一个特定的 ioctl 请求码，用于获取网络接口的硬件地址（MAC 地址）。ioctl 是一个通用的输入&#x2F;输出控制接口，可以对设备文件进行各种操作，而 SIOCGIFHWADDR 则专门用于网络设备。 SIOCGIFHWADDR 的使用当一个程序想要获取某个网络接口的 MAC 地址时，会使用 ioctl 系统调用并传递 SIOCGIFHWADDR 请求码。这个请求码指示内核返回指定网络接口的硬件地址。 请求的结构在使用 SIOCGIFHWADDR 请求时，通常需要一个 struct ifreq 结构体作为参数。该结构体定义在 &lt;net/if.h&gt; 头文件中，主要包含网络接口的名称和相关信息。 1234567891011121314151617181920212223242526272829303132333435363738394041424344#define _GNU_SOURCE#include &lt;dlfcn.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;net/if.h&gt;#include &lt;netpacket/packet.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;// 定义劫持的 ioctl 函数int ioctl(int fd, unsigned long request, ...) &#123; static int (*original_ioctl)(int, unsigned long, ...); if (!original_ioctl) &#123; original_ioctl = dlsym(RTLD_NEXT, \"ioctl\"); &#125; va_list args; va_start(args, request); int ret; if (request == SIOCGIFHWADDR) &#123; struct ifreq *ifr = va_arg(args, struct ifreq *); ret = original_ioctl(fd, request, ifr); if (ret == 0) &#123; // 打印调试信息 printf(\"Intercepted SIOCGIFHWADDR for interface: %s\\n\", ifr-&gt;ifr_name); // 修改 MAC 地址 ifr-&gt;ifr_hwaddr.sa_data[0] = 0x02; ifr-&gt;ifr_hwaddr.sa_data[1] = 0x42; ifr-&gt;ifr_hwaddr.sa_data[2] = 0xac; ifr-&gt;ifr_hwaddr.sa_data[3] = 0x11; ifr-&gt;ifr_hwaddr.sa_data[4] = 0x00; ifr-&gt;ifr_hwaddr.sa_data[5] = 0x02; // 打印调试信息 printf(\"Modified MAC address for interface %s\\n\", ifr-&gt;ifr_name); &#125; &#125; else &#123; ret = original_ioctl(fd, request, va_arg(args, void *)); &#125; va_end(args); return ret;&#125;","tags":[]}]